/********************************
* This file is automatically generated.
* DO NOT MODIFY THIS FILE
*
* ZScript Command Definitions
* http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/command-reference/
*
********************************/


/**
* Creates an interactive push button (can be placed anywhere but advise Top Level).
* @param name: (string) - Button name
* @param popupText: (string) - Popup info Text
* @param command: (commandGroup) - Commands group to execute when button is pressed
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* @param width: (number) - Button width in pixels (0:AutoWidth NonZero:Specified width)
* @param hotkey: (string) - Optional hotkey
* @param iconPath: (string) - Optional button icon (.psd .bmp + .pct for Mac Systems)
* @param height: (number) - Button height in pixels (0:AutoHeight NonZero:Specified height)
* 
* Example:
* 
* [IButton, "Click Me", , [MessageOK, YouClicked]]
* 
* Creates an interactive button with “Click Me” text which will display a “YouClicked”
* message when pressed (Top Level).
* 
* [IButton, ???, "This is a macro button", ...commands...]
* 
* The special Button name ??? indentifies this as a Macro. If the zscript text file is
* placed in the ZStartup\Macros folder, ZBrush will automatically load the zscript; the file
* name will show as the Button name.
*/
[IButton, name, popupText, command, isDisabled, width, hotkey, iconPath, height]

/**
* Creates an interactive slider (Top Level).
* @param name: (string) - Slider name
* @param curValue: (number) - Current Value
* @param step: (number) - Resolution
* @param minValue: (number) - Minimum Value
* @param maxValue: (number) - Maximum Value
* @param popupText: (string) - Popup info Text
* @param command: (commandGroup) - Commands group to execute when value is changed
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* @param width: (number) - Slider width in pixels (0:AutoWidth NonZero:Specified width)
* 
* Example:
* 
* [ISlider, ChangeMe, 12, 1, 0, 100, , [MessageOK, ThankYou]]
* 
* Creates an interactive slider with initial value of 12, range of 0 to 100 and “ChangeMe”
* text which will display a “Thankyou” message when its value is changed
*/
[ISlider, name, curValue, step, minValue, maxValue, popupText, command, isDisabled, width]

/**
* Creates an interactive switch (Top Level).
* @param name: (string) - Switch name
* @param initialSate: (number) - Initial state (1:pressed, 0:unpressed)
* @param popupText: (string) - Popup info Text
* @param commandWhenPressed: (commandGroup) - Commands group to execute when button is
* pressed
* @param commandWhenUnpressed: (commandGroup) - Commands group to execute when button is
* unpressed
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* @param width: (number) - Switch width in pixels (0:AutoWidth NonZero:Specified width)
* 
* Example:
* 
* [ISwitch, ClickMe, 1, "Info text", [MessageOK, On], [MessageOK, Off]]
* 
* Creates an interactive switch with “ClickMe” label which will display an “On” message when
* pressed and an “Off” message when unpressed.<br>
* <strong>Note</strong>: for zplugins, it is best to use the [IEnable] command for each
* switch (placed at the end of the zscript) to make sure switches do not become disabled
* when other plugins are loaded.
*/
[ISwitch, name, initialSate, popupText, commandWhenPressed, commandWhenUnpressed,
isDisabled, width]

/**
* Adds a subpalette to ZBrush interface. Output: Returns 1 if subpalette added successfully.
* Returns 0 if subpalette could not be added or if it already exsists.
* @param name: (string) - Subpalette name
* @param titleMode: (number) - Title mode? (0:Show Title and minimize button(ByDefault)
* 1:Show Title without minimize button 2:Hide Title )
* @param iconPath: (string) - Optional subpalette gray-scale (8-bits) icon (Standard size of
* 20x20 pixels)
* @param leftInset: (number) - Left Inset (0:default)
* @param rightInset: (number) - Right Inset (0:default)
* @param leftTop: (number) - Left Top (0:default)
* @param rigthBottom: (number) - Right Bottom (0:default)
* return (number)
* 
* Example:
* 
* [ISubPalette, "ZPlugin:My Plugins"]
* 
* Creates a “My Plugins” subpalette within the ZPlugin palette. This command is essential
* for creating a zscript plugin.
*/
[ISubPalette, name, titleMode, iconPath, leftInset, rightInset, leftTop, rigthBottom]

/**
* Locates a ZBrush interface item (Top Level).
* @param uiPath: (string) - Interface item path
* @param name: (string) - Button name
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [ButtonFind, Document:Width, Text]
* 
* Locates the width button in the Document menu
*/
[ButtonFind, uiPath, name, isDisabled]

/**
* Locates and presses a ZBrush interface item (Top Level).
* @param uiPath: (string) - Interface item path
* @param name: (string) - Button name
* @param isDisabled: (string) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [ButtonPress, Tool:Sphere3D, Text]
* 
* Locates the Sphere3D button in the Tool menu and presses it making the Sphere3D the active
* tool
*/
[ButtonPress, uiPath, name, isDisabled]

/**
* Locates and sets a new value to a ZBrush interface item (Top Level).
* @param uiPath: (string) - Interface item path
* @param value: (any) - Value
* @param name: (string) - Button name
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [ButtonSet, Document:Width, 123, Text]
* 
* Locates the Width slider in the Document menu and enters “123” as its value
*/
[ButtonSet, uiPath, value, name, isDisabled]

/**
* Locates and unpresses a ZBrush interface item (Top Level).
* @param uiPath: (string) - Interface item path
* @param name: (string) - Button name
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [ButtonUnPress, Layer:Modifiers:W, Text]
* 
* Locates the W button in the Modifiers submenu of the Layer menu and unpresses it
*/
[ButtonUnPress, uiPath, name, isDisabled]

/**
* Displays a note to the user. Output: If the note has UI buttons then the return value of
* the pressed buttons (1=1st button, 2=2nd button …), otherwise the return value will be
* zero (Sub-Level only).
* @param text: (string) - Text line
* @param uiPathToPoint: (string) - Optional path of an interface item to be pointed out
* (default:none)
* @param displayTime: (number) - Display Duration (in seconds) (0:wait for user
* action(default), -1:combine with next note command)
* @param backgroundColor: (number) - Popup background color (0x000000<->0xffffff,
* default:0x606060, 0:No Background)
* @param distance: (number) - Prefered distance of the note from the specified interface
* item (default:48)
* @param width: (number) - Prefered Note width (in pixels, default:400)
* @param markedWindowFillColor: (number) - optional marked windows fill color
* (0x000000<->0xffffff or (blue+(green*256)+(red*65536))(Omitted value:No fill))
* @param hFrameSize: (number) - Frame horizontal size (1:Max width (default))
* @param vFrameSize: (number) - Frame vertical size (1:Max height (default))
* @param frameLeftSde: (number) - Frame left side (0:left (default), .5:center, 1:right)
* Omit value for horizontal autocentering
* @param frameTopSide: (number) - Frame top side ( 0:top (default), .5:center, 1:bottom
* )Omit value for vertical auto-centering
* @param iconPath: (string) - Optional icon file name
* return (number)
* 
* Example:
* 
* [Note, "Hello There"]
* 
* Displays a message to the user with “Hello There” as the text.
*/
[Note, text, uiPathToPoint, displayTime, backgroundColor, distance, width,
markedWindowFillColor, hFrameSize, vFrameSize, frameLeftSde, frameTopSide, iconPath]

/**
* Displays a note in progress bar (Sub-Level only).
* @param message: (string) - The Message that will be shown (use empty string to clear
* current note)
* @param progressBarValue: (number) - Optional progress-bar value (0:Min, 1:Max)
* 
* Example:
* 
* [NoteBar, "ZScript is calculating, Please wait..."]
* 
* Displays a progress bar note “ZScript is calculating. Please wait…”.
*/
[NoteBar, message, progressBarValue]

/**
* Defines a button to be included within the next Note to be shown (Sub-Level only).
* @param name: (string) - Button name
* @param iconPath: (string) - Optional button icon
* @param isPressed: (number) - Initially Pressed? (default:unpressed)
* @param isDisabled: (number) - Initially Disabled? (default:enabled)
* @param hRelPos: (number) - Optional button H relative position (Positive value:offset from
* left, Negative value:offset from right, 0:automatic)
* @param vRelPos: (number) - Optional button V relative position (Positive value:offset from
* top, Negative value:offset from bottom, 0:automatic)
* @param width: (number) - Optional button width in pixels (default:automatic)
* @param height: (number) - Optional button height in pixels (default:automatic)
* @param buttonColor: (number) - Optional button color (0x000000<->0xffffff or
* (blue+(green*256)+(red*65536)))
* @param textColor: (number) - Optional text color (0x000000<->0xffffff or
* (blue+(green*256)+(red*65536)))
* @param bgOpacity: (number) - Optional background opacity (default:1)
* @param textOpacity: (number) - Optional text opacity (default:1)
* @param iconOpacity: (number) - Optional image opacity (default:1)
* 
* Example:
* 
* [NoteIButton, "OK"] 
* 
* Defines an “OK” note button.
*/
[NoteIButton, name, iconPath, isPressed, isDisabled, hRelPos, vRelPos, width, height,
buttonColor, textColor, bgOpacity, textOpacity, iconOpacity]

/**
* Returns the value of a NoteIButton which was shown in the last displayed Note. Output: The
* item value.
* @param indexOrName: (any) - Note-button index (1:1st) or its name
* return (number)
* 
* Example:
* 
* [NoteIGet, 1]
* 
* Returns the value of the 1st note button or switch.
* 
* [NoteIGet, "Double"]
* 
* Returns the value of the note button or switch named “Double”.
*/
[NoteIGet, indexOrName]

/**
* Define a switch-button to be included within the next Note to be shown (Sub-Level only).
* @param name: (string) - Switch name
* @param iconPath: (string) - Optional button icon
* @param isPressed: (number) - Initially Pressed? (default:unpressed)
* @param isDisabled: (number) - Initially Disabled ? (default:enabled)
* @param hRelPos: (number) - Optional button H relative position (Positive value:offset from
* left, Negative value:offset from right, 0:automatic)
* @param vRelPos: (number) - Optional button V relative position (Positive value:offset from
* top, Negative value:offset from bottom, 0:automatic)
* @param width: (number) - Optional button width in pixels (default:automatic)
* @param height: (number) - Optional button height in pixels (default:automatic)
* @param buttonColor: (number) - Optional button color (0x000000<->0xffffff or
* (blue+(green*256)+(red*65536)))
* @param textColor: (number) - Optional text color (0x000000<->0xffffff or
* (blue+(green*256)+(red*65536)))
* @param bgOpacity: (number) - Optional background opacity (default:1)
* @param textOpacity: (number) - Optional text opacity (default:1)
* @param iconOpacity: (number) - Optional image opacity (default:1)
* 
* Example:
* 
* [NoteISwitch, "Double Sided"]
* 
* Defines a “Double Sided” note switch-button.
*/
[NoteISwitch, name, iconPath, isPressed, isDisabled, hRelPos, vRelPos, width, height,
buttonColor, textColor, bgOpacity, textOpacity, iconOpacity]

/**
* Displays a user message with a single OK button
* @param message: (string) - The Message that will be shown
* @param tite: (string) - The Title of the message
* 
* Example:
* 
* [MessageOK, "Hello There"]
* 
* Displays a message to the user with “Hello There” as the text, and waits for the user to
* click the “OK” button (Sub-Level only).
*/
[MessageOK, message, tite]

/**
* Displays a user message with CANCEL and OK buttons Output: Returns the button that the
* user clicked. (0=CANCEL, 1=OK)(Sub-Level only).
* @param message: (string) - The Message that will be shown
* @param title: (string) - The Title of the message
* return (number)
* 
* Example:
* 
* [MessageOKCancel, "Delete this image?"]
* 
* Displays a message to the user with “Delete this image?” as the text, and waits for the
* user to click the “OK” or “Cancel” button.
*/
[MessageOKCancel, message, title]

/**
* Displays a user message with YES and NO buttons Output: Returns the button that the user
* clicked (0=NO, 1=YES)(Sub-Level only).
* @param message: (string) - The Message that will be shown
* @param title: (string) - The Title of the message
* return (number)
* 
* Example:
* 
* [MessageYesNo, "Are you sure?"]
* 
* Displays a message to the user with “Are you sure?” as the text, and waits for the user to
* click the “YES” or “NO” button.
*/
[MessageYesNo, message, title]

/**
* Displays a user message with YES, NO and CANCEL buttons Output: Returns the button that
* the user clicked (0=NO, 1=YES CANCEL=-1)(Sub-Level only).
* @param message: (string) - The Message that will be shown
* @param title: (string) - The Title of the message
* return (number)
* 
* Example:
* 
* [MessageYesNoCancel, "Are you sure?"]
* 
* Displays a message to the user with “Are you sure?” as the text, and waits for the user to
* click the “YES”, “NO” or “CANCEL” button.
*/
[MessageYesNoCancel, message, title]

/**
* Emulates a click within the current canvas area
* @param X1: (number) - X1
* @param Y1: (number) - Y1
* @param X2: (number) - X2
* @param Y2: (number) - Y2
* @param X3: (number) - X3
* @param Y3: (number) - Y3
* @param X4: (number) - X4
* @param Y4: (number) - Y4
* @param X5: (number) - X5
* @param Y5: (number) - Y5
* @param X6: (number) - X6
* @param Y6: (number) - Y6
* @param X7: (number) - X7
* @param Y7: (number) - Y7
* @param X8: (number) - X8
* @param Y8: (number) - Y8
* 
* Example:
* 
* [CanvasClick, 10, 10, 20, 20]
* 
* Emulates a canvas click at 10, 10 with a drag to 20, 20 before releasing the mouse button
*/
[CanvasClick, X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5, X6, Y6, X7, Y7, X8, Y8]

/**
* Hides the Transformation Gyro
* 
* Example:
* 
* [CanvasGyroHide]
* 
* Hides the Transformation Gyro until the next [CanvasGyroShow] is encountered
*/
[CanvasGyroHide]

/**
* Shows the Transformation Gyro
* 
* Example:
* 
* [CanvasGyroShow]
* 
* Shows the Transformation Gyro hidden by a previous [CanvasGyroHide]
*/
[CanvasGyroShow]

/**
* Returns the H pan value of the active document view Output: The current H Pan value.
* return (number)
* 
* Example:
* 
* [CanvasPanGetH]
* 
* Returns the Horizontal pan value of the active document view
*/
[CanvasPanGetH]

/**
* Returns the V pan value of the active document view Output: The current V Pan value.
* return (number)
* 
* Example:
* 
* [CanvasPanGetV]
* 
* Returns the Vertical pan value of the active document view
*/
[CanvasPanGetV]

/**
* Pans (Scrolls) the active document view
* @param hValue: (number) - H value (0:left of document)
* @param vValue: (number) - V value (0:top of document)
* 
* Example:
* 
* [CanvasPanSet, 320, 240]
* 
* Scrolls the center of a 640×480 canvas to be at the center of the document view
* 
* [CanvasPanSet, 0, 0]
* 
* Scrolls the top left corner of the canvas to be at the center of the document view
*/
[CanvasPanSet, hValue, vValue]

/**
* Emulates a brush stroke within the current canvas area
* @param strokeData: (strokeData) - StrokeData
* @param delayedUpdate: (number) - Delayed update until end of stroke
* @param rotation: (number) - Rotation
* @param hScale: (number) - HScale
* @param vScale: (number) - VScale
* @param hOffset: (number) - HOffset
* @param vOffset: (number) - VOffset
* 
* Example:
* 
* [CanvasStroke, [StrokeGetLast]]
* 
* Replays the last stroke
*/
[CanvasStroke, strokeData, delayedUpdate, rotation, hScale, vScale, hOffset, vOffset]

/**
* Emulates multiple brush strokes within the current canvas area
* @param strokesData: (strokeData) - StrokesData
* @param delayedUpdate: (number) - Delayed update until end of stroke
* @param rotation: (number) - Rotation
* @param hScale: (number) - HScale
* @param vScale: (number) - VScale
* @param hOffset: (number) - HOffset
* @param vOffset: (number) - VOffset
* @param hRotateCenter: (number) - HRotateCenter
* @param vRotateCenter: (number) - VRotateCenter
* 
* Example:
* 
* [CanvasStrokes, [Var, loadedStrokes]]
* 
* Replays “loadedStrokes” in the canvas area
*/
[CanvasStrokes, strokesData, delayedUpdate, rotation, hScale, vScale, hOffset, vOffset,
hRotateCenter, vRotateCenter]

/**
* Returns the zoom value of the active document view Output: The current zoom value.
* return (number)
* 
* Example:
* 
* [CanvasZoomGet]
* 
* Returns the zoom value of the active document view
*/
[CanvasZoomGet]

/**
* Sets the zoom factor of the active document view
* @param zoomFactor: (number) - Zoom factor
* 
* Example:
* 
* [CanvasZoomSet, 2]
* 
* Sets the zoom value to 2 (each Pixol is shown twice as large)
* 
* [CanvasZoomSet, .5]
* 
* Sets the zoom value to .5 (half-antialiased zoom mode)
*/
[CanvasZoomSet, zoomFactor]

/**
* Retrieves information about a specified Pixol Output: The value of the specified Pixol
* @param componentIndex: (number) - Component Index: 0:CompositeColor (0x000000<->>0xffffff
* or (red*65536+green*256+blue)); 1:Z(-32576 to 32576); 2:Red(0 to 255); 3:Green(0 to 255);
* 4:Blue(0 to 255); 5:MaterialIndex(0 to 255); 6:XNormal(-1 to 1); 7:YNormal(-1 to 1);
* 8:ZNormal(-1 to 0)
* @param hPosition: (number) - H Position
* @param vPosition: (number) - V Position
* return (number)
* 
* Example:
* 
* [PixolPick, 1, 10, 20]
* 
* Returns the Z(depth) value at 10, 20 canvas position.
*/
[PixolPick, componentIndex, hPosition, vPosition]

/**
* Retrieves the information from a specified Stroke-type Variable Output: StrokeInfo
* resultInfo number: 0=PointsCount 1=IndexedHPos 2=IndexedVPos 3=IndexedPressure 4=MinH<br>
* 5=MinV 6=MaxH 7=MaxV 8=MaxRadius 9=MaxRadiusPointlndex 10=MaxDeltaH 11=MaxDeltaV<br>
* 12=Total Distance 13=Twirl Count 14=DeducedZValue 15=IndexedkeyPress
* @param stroke: (strokeData) - Stroke-type Variable
* @param infoNumber: (number) - Info number
* @param ptsIndex: (number) - Point index (0 based)
* return (number)
* 
* Example:
* 
* [StrokeGetInfo, [StrokeGetLast], 0]
* 
* Returns the number of points in the last drawn brush stroke
*/
[StrokeGetInfo, stroke, infoNumber, ptsIndex]

/**
* Retrieves the last drawn brush stroke Output: StrokeData
* return (strokeData)
* 
* Example:
* 
* [CanvasStroke, [StrokeGetLast]]
* 
* Replays the last drawn brush stroke
* 
* [CanvasStroke, [StrokeGetLast], 0, 90, 2, 2]
* 
* Replays the last drawn brush stroke rotated 90 degrees and scaled x2.
*/
[StrokeGetLast]

/**
* Loads a brush-stroke text file Output: StrokeData
* @param filePath: (string) - FileName(.txt)
* return (strokeData)
* 
* Example:
* 
* [VarSet, Strokel, [StrokeLoad, "Star.txt"]]
* 
* Loads the “Star.txt” file, creates a BrushStroke object and assigns it to “Strokel”
* variable.
* 
* [CanvasStroke, [StrokeLoad, "Star.txt"]]
* 
* Loads the “Star.txt” file, creates a BrushStroke object and applies it to the canvas.
*/
[StrokeLoad, filePath]

/**
* Loads a brush-strokes text file Output: StrokesData
* @param filePath: (string) - FileName(.txt)
* return (strokeData)
* 
* Example:
* 
* [VarSet, Strokel, [StrokesLoad, "Star.txt"]]
* 
* Loads the “Star.txt” file, creates a BrushStrokes object and assigns it to “Strokel”
* variable.
* 
* [CanvasStroke, [StrokesLoad, "Star.txt"]]
* 
* Loads the “Star.txt” file, creates a BrushStrokes object and applies it to the canvas.
*/
[StrokesLoad, filePath]

/**
* Gets current transformation values (Sub-Level only).
* @param xPos: (number) - X Position
* @param yPos: (number) - Y Position
* @param zPos: (number) - Z Position
* @param xScale: (number) - X Scale
* @param yScale: (number) - Y Scale
* @param zScale: (number) - Z Scale
* @param xRot: (number) - X Rotate
* @param yRot: (number) - Y Rotate
* @param zRot: (number) - Z Rotate
* return (number)
* 
* Example:
* 
* [TransformGet, xPos, yPos, zPos, xSc, ySc, zSc, xRot, yRot, zRot]
* 
* sets the variables xPos, yPos, zPos, xSc, ySc, zSc, xRot, yRot and zRot to the 3D Position,
* , Scale and Rotation values of the last drawn object or current floating object.
*/
[TransformGet, xPos, yPos, zPos, xScale, yScale, zScale, xRot, yRot, zRot]

/**
* Sets new transformation values (Sub-Level only).
* @param xPos: (number) - X Position
* @param yPos: (number) - Y Position
* @param zPos: (number) - Z Position
* @param xScale: (number) - X Scale
* @param yScale: (number) - Y Scale
* @param zScale: (number) - Z Scale
* @param xRot: (number) - X Rotate
* @param yRot: (number) - Y Rotate
* @param zRot: (number) - Z Rotate
* 
* Example:
* 
* [TransformSet, (Document:Width*.5), (Document:Height*.5), 0, 100, 100, 100, 0, 0, 0]
* 
* sets the 3D values of the last drawn object or current floating object to:<br>
* Position – XY center of the canvas and Z depth 0<br>
* Scale – uniform scale of 100<br>
* Rotation – default rotation of 0, 0, 0
*/
[TransformSet, xPos, yPos, zPos, xScale, yScale, zScale, xRot, yRot, zRot]

/**
* Emulates a click within a specified ZBrush interface item (Sub-Level only).
* @param InterfaceItemPath: (string) - Interface item path
* @param X1: (number) - X1
* @param Y1: (number) - Y1
* @param X2: (number) - X2
* @param Y2: (number) - Y2
* @param X3: (number) - X3
* @param Y3: (number) - Y3
* @param X4: (number) - X4
* @param Y4: (number) - Y4
* @param X5: (number) - X5
* @param Y5: (number) - Y5
* @param X6: (number) - X6
* @param Y6: (number) - Y6
* @param X7: (number) - X7
* @param Y7: (number) - Y7
* 
* Example:
* 
* [IClick, LIGHT:Intensity, 55, 10]
* 
* Emulates a click at 55, 10 position
* 
* [IClick, LIGHT:Intensity, 55, 10, 10, 20, 10]
* 
* Emulates a click at 10, 10 with a drag to 20, 10 before releasing the mouse button
*/
[IClick, InterfaceItemPath, X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5, X6, Y6, X7, Y7]

/**
* Closes an interface item.
* @param path: (string) - Interface item path
* @param doShowZoomRect: (number) - Show Zoom Rectangles?
* @param doTargetParentWin: (number) - Target parent window?
* 
* Example:
* 
* [IClose, ZScript:Play]
* 
* deletes the ZScript:Play window
*/
[IClose, path, doShowZoomRect, doTargetParentWin]

/**
* Sets the active color to a new value
* @param red: (number) - Red (0-255)
* @param green: (number) - Green (0-255)
* @param blue: (number) - Blue (0-255)
* 
* Example:
* 
* [IColorSet, 255, 0, 0]
* 
* sets the main interface active color to red
*/
[IColorSet, red, green, blue]

/**
* Sets ZBrush internal version-configuration
* @param version: (number) - ZBrush version-configuration
* 
* Example:
* 
* [IConfig, 2.0]
* 
* sets the interface to 2.0 configuration
* 
* [IConfig, 3.1]
* 
* sets the interface to 3.1 configuration
*/
[IConfig, version]

/**
* Disables a ZScript interface item (can only be used for ZScript-generated interface items)
* @param path: (string) - Window path
* @param id: (number) - Window ID or relative windowID(-100<->100)
* 
* Example:
* 
* [IDisable, Zscript:DoIt]
* 
* Disables the “DoIt” ZScript interface item
* 
* [IDisable, l]
* 
* Disables the next interface item in the ZScript window
*/
[IDisable, path, id]

/**
* Enables a ZScript interface item (can only be used for ZScript-generated interface items)
* @param path: (string) - Window path
* @param id: (number) - Window ID or relative windowID(-100<->100)
* 
* Example:
* 
* [IEnable, ZScript:DoIt]
* 
* Enables the “DoIt” ZScript interface item
* 
* [IEnable, 1]
* 
* Enables the next interface item in the ZScript window
*/
[IEnable, path, id]

/**
* Verifies that a specified interface item exists. Output: 1 if item exists, 0 otherwise
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IExists, TOOL:Sphere3D]
* 
* returns 1 if TOOL:Sphere3D exists, returns 0 otherwise.
*/
[IExists, path]

/**
* Fades in ZBrush window from black.
* @param speed: (number) - Fade in speed in secs. (default:.5 secs)
* 
* Example:
* 
* [IFadeIn, .35]
* 
* fade in from black, speed = 0.35 seconds (*ZBrush 3 only).
*/
[IFadeIn, speed]

/**
* Fades out ZBrush window to black.
* @param speed: (number) - Fade out speed in secs. (default:.5 secs)
* 
* Example:
* 
* [IFadeOut, .35]
* 
* fade out to black, speed = 0.35 seconds (*ZBrush 3 only).
* &nbsp;
*/
[IFadeOut, speed]

/**
* Returns the current value of a ZBrush or ZScript interface item Output: The item value
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGet, Draw:Width]
* 
* Returns the current value of the Width slider in the Draw menu
*/
[IGet, path]

/**
* Returns the status flags of the specified interface item Output: The flags
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetFlags, windowID]
* 
* Returns the info of specified windowID interface item
*/
[IGetFlags, path]

/**
* Returns the hotkey of the specified interface item Output: The Hotkey
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetHotkey, windowID]
* 
* Returns the hotkey of specified windowID interface item
*/
[IGetHotkey, path]

/**
* Returns the window ID code of the specified interface item Output: The Title
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetID, Tool:LoadTool]
* 
* Returns the id code of the Tool:LoadTool interface item
*/
[IGetID, path]

/**
* Returns the info (popup info) of the specified interface item Output: The info
* @param path: (string) - Interface item path
* return (string)
* 
* Example:
* 
* [IGetInfo, windowID]
* 
* Returns the info of specified windowID interface item
*/
[IGetInfo, path]

/**
* Returns the maximum possible value of a ZBrush or ZScript interface item Output: The item
* maximum value
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetMax, Draw:Width]
* 
* Returns the maximum value of the Width slider in the Draw menu
*/
[IGetMax, path]

/**
* Returns the minimum possible value of a ZBrush or ZScript interface item Output: The item
* minimum value
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetMin, Draw:Width]
* 
* Returns the minimum value of the Width slider in the Draw menu
*/
[IGetMin, path]

/**
* Returns the the secondary value of a 2D interface item Output: The item value
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetSeconday, Light:LightPlacement]
* 
* Returns the secondary value of the Light:LightPlacement control
*/
[IGetSecondary, path]

/**
* Returns the Enabled/Disabled status of a ZBrush or ZScript interface item Output: The item
* status 0=Disabled 1=Enabled
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IGetStatus, Transform:Move] 
* 
* Returns the current status of the Move button in the Transform menu
*/
[IGetStatus, path]

/**
* Returns the title of the specified interface item Output: The Title of the button
* @param path: (string) - Interface item path
* @param doReturnFullPath: (number) - Return full path? (0:no nonZero:yes)
* return (string)
* 
* Example:
* 
* [IGetTitle, windowID]
* 
* Returns the title of specified windowID interface item
*/
[IGetTitle, path, doReturnFullPath]

/**
* Returns the pixel-height of an interface item. Output: The height of the interface item.
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IHeight, Tool:SimpleBrush]
* 
* Returns the height of the “Tool:SimpleBrush” interface item
*/
[IHeight, path]

/**
* Hides an interface item.
* @param path: (string) - Interface item path
* @param doShowZoomRect: (number) - Show Zoom Rectangles?
* @param doTargetParentWin: (number) - Target parent window?
* 
* Example:
* 
* [IHide, Draw:Width]
* 
* Hides the “Draw:Width” window
*/
[IHide, path, doShowZoomRect, doTargetParentWin]

/**
* Returns the H position of the interface item in Canvas or Global coordinates. Output: The
* H position of the interface item.
* @param path: (string) - Interface item path
* @param global: (number) - Global coordinates?(set value to non-zero for global
* coordinates; default:Canvas coordinates)
* return (number)
* 
* Example:
* 
* [IHPos, Draw:Width, 1]
* 
* Returns the H position of the “Draw:Width” interface Item in Global coordinates
*/
[IHPos, path, global]

/**
* Simulates a key press
* @param key: (string) - The key to press (with an optional CTRL/CMD, ALT/OPT, SHIFT or TAB
* combination.)
* @param commands: (commandGroup) - Commands group to execute while the key is pressed
* @param hPos: (number) - Optional H cursor position prior to key press
* @param vPos: (number) - Optional V cursor position prior to key press
* 
* Example:
* 
* [IKeyPress, 'x']
* 
* Simulates “x” key press
* 
* [IKeyPress, CTRL+'z']
* 
* Simulates “Ctrl+z” key press
*/
[IKeyPress, key, commands, hPos, vPos]

/**
* Locks an interface item.
* @param path: (string) - Window path
* @param id: (number) - Window ID or relative windowID(-100<->100)
* 
* Example:
* 
* [ILock, ZScript:DoIt]
* 
* locks the “DoIt” Zscript window interface item (*ZBrush 3 only).
* 
* [ILock, 1]
* 
* locks the next interface item (*ZBrush 3 only).
* &nbsp;
*/
[ILock, path, id]

/**
* Locates an interface item and (if possible) maximize its size.
* @param path: (string) - Interface item path
* @param doMaximizeSubPalettes: (number) - Maximize all sub palettes? (0:no, NonZero:yes)
* 
* Example:
* 
* [IMaximize, Tool:, 1]
* 
* Expand the TOOL palette and all of its sub palettes
*/
[IMaximize, path, doMaximizeSubPalettes]

/**
* Locates an interface item and (if possible) minimize its size.
* @param path: (string) - Interface item path
* @param doMinimizeSubPalettes: (number) - Minimize all sub palettes? (0:no, NonZero:yes)
* 
* Example:
* 
* [IMinimize, Tool:, 1]
* 
* Closes the TOOL palette and all of its sub palettes
*/
[IMinimize, path, doMinimizeSubPalettes]

/**
* Returns the current modifiers binary state of a ZBrush or ZScript interface item Output:
* The item value
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IModGet, Tool:Modifiers:Deformation:Rotate]
* 
* Returns the current modifiers of the Rotate slider in the Tool menu. Each modifier is
* identified by its binary value such as lst=1, 2nd=2, 3rd=4, 4th=8
*/
[IModGet, path]

/**
* Sets the modifiers binary value of a ZBrush or a ZScript interface item
* @param path: (string) - Interface item path
* @param value: (number) - Value
* 
* Example:
* 
* [IModSet, Tool:Modifiers:Deformation:Rotate, 2]
* 
* Sets the modifiers of the Rotate slider in the Tool menu to 2. Each modifier is identified
* by its binary value such as lst=1, 2nd=2, 3rd=4, 4th=8
*/
[IModSet, path, value]

/**
* Presses a ZBrush or ZScript interface item (Sub-Level only).
* @param path: (string) - Interface item path
* 
* Example:
* 
* [IPress, Tool:Cube3D]
* 
* Presses the Cube3D button in the Tool menu making the Cube3D the active tool
*/
[IPress, path]

/**
* Interface Reset. Output: Returns the button that the user clicked ( 0=NO, 1=YES )
* (Sub-Level only).
* @param item: (number) - Optional item to reset (default:All). (0:All, 1:Interface,
* 2:Document, 3:Tools, 4:Lights, 5:Materials, 6:Stencil)
* @param version: (number) - Optional ZBrush version-configuration
* return (number)
* 
* Example:
* 
* [IReset]
* 
* Resets the interface to a default state
*/
[IReset, item, version]

/**
* Returns 1 if the specified ZBrush or ZScript interface item is currently disabled, returns
* 0 otherwise Output: The item ‘Disabled’ status (1=Disabled 0=Enabled)
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IsDisabled, Transform:Move]
* 
* Returns 1 if the “Transform:Move” interface item is currently disabled, returns 0
* otherwise
*/
[IsDisabled, path]

/**
* Returns 1 if the specified ZBrush or ZScript interface item is currently enabled, returns
* 0 otherwise Output: The item ‘Enabled’ status (1=Enabled 0=Disabled)
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IsEnabled, Transform:Move]
* 
* Returns 1 if the “Transform:Move” interface item is currently enabled, returns 0 otherwise
*/
[IsEnabled, path]

/**
* Sets a new value to a ZBrush or ZScript interface item
* @param path: (string) - Interface item path
* @param value1: (number) - Value
* @param value2: (number) - Secondary value
* 
* Example:
* 
* [ISet, Draw:Width, 50]
* 
* Sets the Width slider in the Draw menu to 50
*/
[ISet, path, value1, value2]

/**
* Sets the hotkey of the specified interface item
* @param path: (string) - Interface item path
* @param hotkey: (string) - Hotkey(0:no Hotkey)
* 
* Example:
* 
* [ISetHotkey, windowID, 'k']
* 
* Sets “k” as the hotkey for the specified windowID interface item
*/
[ISetHotkey, path, hotkey]

/**
* Sets the maximum value for an ISlider interface item (can only be used for
* ZScript-generated interface items)
* @param path: (string) - Interface item path
* @param value: (number) - New max value
* 
* Example:
* 
* [ISetMax, Zscript:Counter, 10]
* 
* Sets the maximum value of “ZScript:Counter” interface item to 10
*/
[ISetMax, path, value]

/**
* Sets the minimum value for an ISlider interface item (can only be used for
* ZScript-generated interface items)
* @param path: (string) - Interface item path
* @param value: (number) - New min value
* 
* Example:
* 
* [ISetMin, Zscript:Counter, 10]
* 
* Sets the minimum value of “ZScript:Counter” interface item to 10
*/
[ISetMin, path, value]

/**
* Locates an interface item and makes it visible.
* @param path: (string) - Interface item path
* @param doShowZoomRect: (number) - Show Zoom Rectangles?
* @param doTargetParentWin: (number) - Target parent window?
* 
* Example:
* 
* [IShow, Draw:Width]
* 
* Makes the “Draw:Width” item visible. If necessary the “Draw” palette will be opened
*/
[IShow, path, doShowZoomRect, doTargetParentWin]

/**
* Temporarily sets the status of ShowActions
* @param status: (number) - The ShowActions status.(0:Disable ShowActions, Positive
* value:enable show actions, Negative value:Reset ShowActions)
* 
* Example:
* 
* [IShowActions, 0]
* 
* Temporarily disables ShowActions
*/
[IShowActions, status]

/**
* Returns 1 if the specified ZBrush or ZScript interface item is currently locked, returns 0
* otherwiseOutput: The item ‘Locked’ status (1=Locked 0=Unlocked)
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IsLocked, Transform:Move]
* 
* returns 1 if the “Transform:Move” interface item is locked, returns 0 otherwise (*ZBrush 3
* only).
*/
[IsLocked, path]

/**
* Emulates a brush stroke within an interface item
* @param path: (string) - Interface item path
* @param strokeData: (strokeData) - Stroke Data
* 
* Example:
* 
* [IStroke, [StrokeLoad, "CurvePoints.txt"]]
* 
* Loads the “Curvepoints.txt” file, creates a BrushStroke and applies it to the interface
* item
*/
[IStroke, path, strokeData]

/**
* Returns 1 if the specified ZBrush or ZScript interface item is currently unlocked, returns
* 0 otherwiseOutput: The item ‘Unlocked’ status (1=Unlocked 0=locked)
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IsUnLocked, Transform:Move]
* 
* returns 1 if the “Transform:Move” interface item is unlocked, returns 0 otherwise (*ZBrush
* 3 only).
*/
[IsUnlocked, path]

/**
* Toggles the state of a ZBrush or ZScript interface item
* @param path: (string) - Interface item path
* 
* Example:
* 
* [IToggle, Draw:ZAdd]
* 
* Toggles the ZAdd button in the Draw menu turning ZAdd mode on and off
*/
[IToggle, path]

/**
* Unlocks an interface item
* @param id: (number) - Window path, Window ID or relative windowID(-100<->100)
* 
* Example:
* 
* [IUnLock, ZScript:DoIt]
* 
* unlocks the “DoIt” Zscript window interface item (*ZBrush 3 only).
* 
* [IUnLock, 1]
* 
* unlocks the next interface item (*ZBrush 3 only).
*/
[IUnlock, id]

/**
* Unpresses a ZBrush or ZScript interface item
* @param path: (string) - Interface item path
* 
* Example:
* 
* [IUnPress, Layer:Modifiers:w]
* 
* Unpresses the W button in the Modifiers submenu of the Layer menu
*/
[IUnPress, path]

/**
* Updates the ZBrush interface.
* @param count: (number) - Repeat count (default:1)
* @param doRedrawUI: (number) - Redraw UI? (default:no, 1:yes)
* 
* Example:
* 
* [IUpdate, 5]
* 
* Execute 5 interface-update cycles
*/
[IUpdate, count, doRedrawUI]

/**
* Returns the V position of the interface item in Canvas or Global coordinates. Output: The
* V position of the interface item.
* @param path: (string) - Interface item path
* @param global: (number) - Global coordinates? (set value to non-zero for global
* coordinates, default:Canvas coordinates)
* return (number)
* 
* Example:
* 
* [IVPos, Draw:Width, 1]
* 
* Returns the V position of the “Draw:Width” interface Item in Global coordinates
*/
[IVPos, path, global]

/**
* Returns the pixel-width of an interface item. Output: The width of the interface item.
* @param path: (string) - Interface item path
* return (number)
* 
* Example:
* 
* [IWidth, Tool:SimpleBrush]
* 
* with Returns the width of the “Tool:SimpleBrush” interface item.
*/
[IWidth, path]

/**
* Returns ZBrush info. Output: Result value
* @param infoType: (number) - The info type. (0:version number 1:Demo/Beta/Full 2:Runtime
* seconds 3:Mem use 4:VMem Use 5:Free Mem 6:operating system (0:PC 1:Mac 2:MacOSX) 7:Unique
* session ID 8:Total RAM)
* return (number)
* 
* Example:
* 
* [ZBrushInfo, 6]
* 
* returns the user’s operating system. Useful if there are different requirements for
* running the zscript on different operating systems.
*/
[ZBrushInfo, infoType]

/**
* Returns the task-priority of ZBrush. Output: The current task-priority
* return (number)
* 
* Example:
* 
* [ZBrushPriorityGet]
* 
* Returns current task-priority.
*/
[ZBrushPriorityGet]

/**
* Sets the task-priority of ZBrush.
* @param priority: (number) - The priority. -2:Low, -1:BelowNormal, 0:normal, 1:Above Normal,
* , 2:High
* 
* Example:
* 
* [ZBrushPrioritySet, 1]
* 
* sets ZBrush priority to above normal.
*/
[ZBrushPrioritySet, priority]

/**
* Returns the current H position of the mouse in Canvas or Global coordinates. Output: The H
* position of the mouse
* @param global: (number) - Global coordinates? (set value to non-zero for global
* coordinates, default:Canvas coordinates)
* return (number)
* 
* Example:
* 
* [MouseHPos]
* 
* Returns the current H position of the mouse
*/
[MouseHPos, global]

/**
* Returns the current state of the left mouse button Output: Returns 1 if mouse button is
* pressed, returns zero if unpressed
* return (number)
* 
* Example:
* 
* [MouseLButton]
* 
* Returns 1 if mouse button is pressed, returns zero if unpressed
*/
[MouseLButton]

/**
* Returns the current V position of the mouse in Canvas or Global coordinates. Output: The V
* position of the mouse
* @param global: (number) - Global coordinates? (set value to non-zero for global
* coordinates, default:Canvas coordinates)
* return (number)
* 
* Example:
* 
* [MouseVPos]
* 
* Returns the current V position of the mouse
*/
[MouseVPos, global]

/**
* Sets the pen background color (Top Level).
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [BackColorSet, 255, 255, 0]
* 
* sets the pen background color to yellow
*/
[BackColorSet, red, green, blue]

/**
* Displays a text line using the current Caption settings (Top Level).
* @param text: (string) - Text
* 
* Example:
* 
* [Caption, This Is A Caption]
* 
* displays “ThisIsACaption” using the Caption settings
* &nbsp;
*/
[Caption, text]

/**
* Sets the color of the zscript window font (Top Level).
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [FontSetColor, 255, 0, 0]
* 
* sets zscript window font to red
* 
* [FontSetColor, 255, 255, 255]
* 
* sets zscript window font to white
*/
[FontSetColor, red, green, blue]

/**
* Sets the opacity of the zscript window font (Top Level).
* @param opacity: (number) - Opacity
* 
* Example:
* 
* [FontSetOpacity, .25]
* 
* sets zscript window font opacity to 25%
* 
* [FontSetOpacity, 1]
* 
* sets zscript window font opacity to 100%
*/
[FontSetOpacity, opacity]

/**
* Sets the intensity of the zscript window font (Top Level).
* @param size: (number) - Size: 1:Small 2:Med 3:Large
* 
* Example:
* 
* [FontSetSize, 2]
* 
* sets zscript window font size to medium
* &nbsp;
*/
[FontSetSize, size]

/**
* Sets the size of the zscript window font to large (Top Level).
* 
* Example:
* 
* [FontSetSizeLarge]
* 
* sets zscript window font size to large
*/
[FontSetSizeLarge]

/**
* Sets the size of the zscript window font to medium (Top Level).
* 
* Example:
* 
* [FontSetSizeMedium]
* 
* sets zscript window font size to medium
*/
[FontSetSizeMedium]

/**
* Sets the size of the zscript window font to small.
* 
* Example:
* 
* [FontSetSizeSmall]
* 
* sets zscript window font size to small
*/
[FontSetSizeSmall]

/**
* Sets the main interface color to a new value (Top Level).
* @param text: (string) - Description Text
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [FrontColorSet, Text, 0, 0, 0]
* 
* sets the ZBrush interface main front color to black
*/
[FrontColorSet, text, red, green, blue, isDisabled]

/**
* Displays a hot-key for the specified interface item (Top Level).
* @param path: (string) - Interface item path
* return (string)
* 
* Example:
* 
* [HotKeyText, DOCUMENT:UNDO]
* 
* displays the hot key of the DOCUMENT:UNDO button using the Hotkey text settings
*/
[HotKeyText, path]

/**
* Loads and displays an image (Top Level).
* @param filename: (string) - FileName (.psd .bmp + .pct for Mac Systems)
* @param alignment: (number) - Align (0:center 1:left 2:right)
* @param width: (number) - Resized Width
* 
* Example:
* 
* [Image, TestImage.psd]
* 
* Loads and displays TestImage.psd in the zscript window, center-aligned (default) in its
* original size
*/
[Image, filename, alignment, width]

/**
* Enables or Disables a ZScript interface item (can only be used for ZScript-generated
* interface items).
* @param path: (string) - Interface item path
* @param status: (number) - New status ( 0:Disable NotZero:Enable )
* 
* Example:
* 
* [ISetStatus, ZScript:DoIt, 1]
* 
* Enables the “DoIt” ZScript interface item
* 
* [ISetStatus, ZScript:DoIt, 0]
* 
* Disables the “DoIt” ZScript interface item
*/
[ISetStatus, path, status]

/**
* Sets the width of the page (Top Level).
* @param width: (number) - Preferred PageWidth
* 
* Example:
* 
* [PageSetWidth, 300]
* 
* sets the zscript window display page width to a maximum of 300 pixels
*/
[PageSetWidth, width]

/**
* Paints the background using the current background color (Top Level).
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [PaintBackground, 10, 10, 10]
* 
* Fills the zscript window background with a dark gray color
*/
[PaintBackground, red, green, blue]

/**
* Draws a full page-width rectangle using the current background color (Top Level).
* @param height: (number) - Height
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [PaintBackSliver, 20, 255, 255, 0]
* 
* Draws a yellow rectangle in the zscript window, full page-width and 20 pixels tall.
*/
[PaintBackSliver, height, red, green, blue]

/**
* Draws a visual page-break (Top Level).
* 
* Example:
* 
* [PaintPageBreak]
* 
* Draws a default page break in the zscript window, which is a special case of the
* PaintBackSliver command
*/
[PaintPageBreak]

/**
* Draws a rectangle (in the ZScript window) using the current pen color (Top Level).
* @param width: (number) - Width
* @param height: (number) - Height
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [PaintRect, 80, 100]
* 
* Draws a rectangle in the zscript window, 80 pixels wide and 100 pixels tall using the
* current pen color.
*/
[PaintRect, width, height, red, green, blue]

/**
* Draws a rectangle with imbedded text (Top Level).
* @param width: (number) - Width
* @param height: (number) - Height
* @param text: (number) - Text
* 
* Example:
* 
* [PaintTextRect, 200, 100, "This is an Example"]
* 
* Draws a rectange in the zscript window, 200 pixels wide and 100 tall with “This is an
* Example” inside it.
*/
[PaintTextRect, width, height, text]

/**
* Moves the pen position to the beginning of the next line (Same as PenMoveDown).
* 
* Example:
* 
* [PD]
* 
* moves the pen to the beginning of the next line of the zscript window.
*/
[PD]

/**
* Moves the pen a relative distance.
* @param hOffset: (number) - Horizontal Offset
* @param vOffset: (number) - Vertical Offset
* 
* Example:
* 
* [PenMove, 40, 80]
* 
* moves the pen 40 pixels to the right and 80 pixels down in the zscript window.<br>
* Note: useful for arranging interface items in the zscript window.
*/
[PenMove, hOffset, vOffset]

/**
* Moves the pen position to the horizontal center of the page .
* 
* Example:
* 
* [PenMoveCenter]
* 
* moves the pen to the center of the zscript window.
*/
[PenMoveCenter]

/**
* Moves the pen position to the beginning of the next line .
* 
* Example:
* 
* [PenMoveDown]
* 
* moves the pen to the beginning of the next line in the zscript window.
*/
[PenMoveDown]

/**
* Moves the pen position to the left side of the page .
* 
* Example:
* 
* [PenMoveLeft]
* 
* moves the pen to the left of the zscript window.
*/
[PenMoveLeft]

/**
* Moves the pen position to the right side of the page .
* 
* Example:
* 
* [PenMoveRight]
* 
* moves the pen to the right of the zscript window.
*/
[PenMoveRight]

/**
* Sets the pen main color .
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* 
* Example:
* 
* [PenSetColor, 128, 128, 128]
* 
* sets pen color to medium gray.
*/
[PenSetColor, red, green, blue]

/**
* Modifies the setting of Title, SubTitle and Caption text.<br>
* Property Indexes:<br>
* 0 = FontSetSize(1=small, 2=med, 3=large)<br>
* 1 = alignments(0=center, 1=L, 2=R)<br>
* 2 = Opacity(0-1)<br>
* 3 = 0x0000000xffffff<br>
* 4 = Border size<br>
* 5 = BackColor1 (0x0000000xffffff)<br>
* 6 = GradientMode (-1=None, 0=Flat, 1=HGrad, 2=VGrad, 3=DHGrad, 4=DVGrad)<br>
* 7 = BackColor2 (0x0000000xffffff)
* @param commandName: (string) - The base command name (Title,SubTitle,Caption)
* @param index: (number) - Property Index
* @param value: (number) - The new Value
* 
* Example:
* 
* [PropertySet, Title, 1, 1]
* 
* sets left alignment for Title settings.
*/
[PropertySet, commandName, index, value]

/**
* Begins a collapsible section .
* @param title: (string) - Section Title
* @param state: (number) - Initial state (1:Expanded, 0:Collapsed )
* @param popupInfo: (string) - Popup Info Text
* @param commandsWhenExpanding: (commandGroup) - Commands group to execute when expanding to
* reveal content
* @param commandsWhenCollapsing: (commandGroup) - Commands group to execute when collapsing
* to hide content
* @param isDisabled: (number) - Initially Disabled? (0:Enabled(ByDefault) NonZero:Disabled)
* 
* Example:
* 
* [SectionBegin, Chapterl2]
* 
* Begins a collapsible section in the zscript window with “Chapterl2” as the Title which
* will expand/collapse to reveal/hide its contents when pressed.
*/
[SectionBegin, title, state, popupInfo, commandsWhenExpanding, commandsWhenCollapsing,
isDisabled]

/**
* Ends a collapsible section .
* 
* Example:
* 
* [SectionEnd]
* 
* ends a previously defined collapsible section in the zscript window.
*/
[SectionEnd]

/**
* Displays a text line using the current SubTitle settings .
* @param text: (string) - Text
* 
* Example:
* 
* [SubTitle, "Chapter 23"]
* 
* displays “Chapter 23” in the zscript window using the SubTitle settings.
*/
[SubTitle, text]

/**
* Calculates the pixel-width of the specified string Output: Width of text in pixels .
* @param text: (string) - The text to be evaluated
* return (number)
* 
* Example:
* 
* [TextCalcWidth, "Test"]
* 
* returns the width in pixels of the string “Test”.
*/
[TextCalcWidth, text]

/**
* Displays a text line using the current Title settings .
* @param text: (string) - Text
* 
* Example:
* 
* [Title, "Hello"]
* 
* displays “Hello” in the zscript window using the Title settings.
*/
[Title, text]

/**
* Defines a variable (advised Top Level).
* @param name: (anyVar) - Variable name
* @param value: (any) - Variable defaultValue
* 
* Example:
* 
* [VarDef, xPos, 1]
* 
* Defines a variable with the name “xPos” and initializes it to 1.
* 
* [VarDef, xPos(100)]
* 
* Defines a list variable named “xPos” with 100 items.<br>
* Note: the list index starts at 0, so xPos(99) is the hundredth item.
*/
[VarDef, name, value]

/**
* Sets the value of a named variable (can be placed anywhere).
* @param name: (anyVar) - Variable name
* @param value: (any) - New Value
* 
* Example:
* 
* [VarSet, xPos, 42]
* 
* sets variable “xPos” to 42.
* 
* [VarSet, xPos, (Document:Width*.5)]
* 
* sets variable “xPos” to Document:Width multiplied by 0.5.
*/
[VarSet, name, value]

/**
* Copies items from a source list to a destination list
* @param destList: (anyList) - Destination list
* @param destIndex: (number) - Destination initial index
* @param sourceList: (anyList) - Source list
* @param sourceIndex: (number) - Source initial index
* @param nbToCopy: (number) - Number of items to copy.(if omitted or it is 0, then all items
* will be copied)
* 
* Example:
* 
* [VarListCopy, destList, 0, sourceList, 4, 3]
* 
* copies items 4-6 from sourceList to items 0-2 of destList.
*/
[VarListCopy, destList, destIndex, sourceList, sourceIndex, nbToCopy]

/**
* Loads variable/s from a file Output: Number of loaded or verfied values
* @param name: (anyVar) - Variable name
* @param filename: (string) - FileName
* @param onlyVerify: (number) - Verify only (1:Only Verify that a proper saved variable file
* exists, 0:(default)Verifies and loads values)
* return (number)
* 
* Example:
* 
* [VarLoad, userData, tempFile]
* 
* Sets variable named “userData” to value/s loaded from the “tempFile.zvr” file.
*/
[VarLoad, name, filename, onlyVerify]

/**
* Saves variable value/s to file Output: Number of saved values
* @param name: (anyVar) - Variable name
* @param FileName: (string) - FileName
* return (number)
* 
* Example:
* 
* [VarSave, userData, tempFile]
* 
* Saves the current value/s of “userData” variable to “tempFile.zvr” file.
*/
[VarSave, name, FileName]

/**
* Asks user to input a string. Output: Returns the text typed by user or an empty string if
* canceled.
* @param initialString: (string) - Initial string
* @param title: (string) - Title
* return (string)
* 
* Example:
* 
* [StrAsk, "Type text in here", "Please enter a file name"]
* 
* Displays a text input dialog and returns the string typed by user. Note: include both
* initial string and title.
*/
[StrAsk, initialString, title]

/**
* Returns specified portion of the input string Output: The extracted portion of the input
* string.
* @param input: (string) - Input string
* @param start: (number) - Start character index (0:left)
* @param end: (number) - End character index (0:left)
* return (string)
* 
* Example:
* 
* [StrExtract, "abcdefgh", 3, 5]
* 
* Returns the “def” portion of the input string.
*/
[StrExtract, input, start, end]

/**
* Locate a string within a string. Output: Returns the starting index of the 1st string
* within the 2nd string. returns -1 if not found.
* @param strToFind: (string) - Find this string
* @param string: (string) - In this string
* @param start: (number) - Optional start search index (default:0)
* return (number)
* 
* Example:
* 
* [StrFind, "Br", "ZBrush"]
* 
* Searches for “Br” within “ZBrush” and returns 1.
* 
* [StrFind, "Ba", "ZBrush"]
* 
* Searches for “Ba” within “ZBrush” and returns -1 (not found).
*/
[StrFind, strToFind, string, start]

/**
* Returns the character of the specified Ascii value. Output: The character of the specified
* Ascii value.
* @param asciiValue: (number) - Input Ascii value
* return (string)
* 
* Example:
* 
* [StrFromAsc, 65]
* 
* returns “A”.
*/
[StrFromAsc, asciiValue]

/**
* Returns the number of characters in the input string. Output: Number of characters in the
* input string.
* @param string: (string) - String to evaluate
* return (number)
* 
* Example:
* 
* [StrLength, "Hello"]
* 
* Returns 5 as the number of characters in “Hello”.
*/
[StrLength, string]

/**
* Returns the lowercase version of the input string. Output: The lowercase version of the
* input string.
* @param string: (string) - Input string
* return (string)
* 
* Example:
* 
* [StrLower, "ZBrush"]
* 
* returns “zbrush”.
*/
[StrLower, string]

/**
* Combines two (or more) strings into one string. Output: The combined string. Note: result
* string will not exceed 255 characters in length
* @param str1: (string) - Str 1
* @param str2: (string) - Str 2
* @param optStr3: (string) - Optional Str 3
* @param optStr4: (string) - Optional Str 4
* @param optStr5: (string) - Optional Str 5
* @param optStr6: (string) - Optional Str 6
* @param optStr7: (string) - Optional Str 7
* @param optStr8: (string) - Optional Str 8
* @param optStr9: (string) - Optional Str 9
* @param optStr10: (string) - Optional Str 10
* @param optStr11: (string) - Optional Str 11
* @param optStr12: (string) - Optional Str 12
* return (string)
* 
* Example:
* 
* [StrMerge, "Texture number ", "15", " is selected"]
* 
* returns the merged string: “Texture number 15 is selected”.
* 
* [StrMerge, ZTool, 27, .ztl]
* 
* returns the merged string: “ZTool27.ztl”.
*/
[StrMerge, str1, str2, optStr3, optStr4, optStr5, optStr6, optStr7, optStr8, optStr9,
optStr10, optStr11, optStr12]

/**
* Returns the Ascii value of a character. Output: The Ascii value of a character.
* @param char: (string) - Input string
* @param charOffset: (number) - Optional character offset (default:0)
* return (number)
* 
* Example:
* 
* [StrToAsc, "ZBrush"]
* 
* returns the Ascii value of “Z”.
* 
* [StrToAsc, "ZBrush", 2]
* 
* returns the Ascii value of “r”.
*/
[StrToAsc, char, charOffset]

/**
* Returns the uppercase version of the input string. Output: The uppercase version of the
* input string.
* @param string: (string) - Input string
* return (string)
* 
* Example:
* 
* [StrUpper, "ZBrush"]
* 
* returns “ZBRUSH”.
*/
[StrUpper, string]

/**
* Executes the specified plugin file (DLL). Output: Returns the result value which was
* returned by the executed routine. Returns zero if error
* @param filename: (string) - File name including the extension (such as plugin.dll )
* @param routine: (string) - Routine to call
* @param text: (string) - Optional text input
* @param number: (number) - Optional number input
* @param memBlockInput: (memoryBlock) - Optional memory block input
* @param memBlockOutput: (memoryBlock) - Optional memory block output
* return (any)
* 
* Example:
* 
* [FileExecute, PluginTest.dll, ShowMsg, "Hi There"]
* 
* Executed the “ShowMsg” routine of the “PluginTest.dll” plugin
*/
[FileExecute, filename, routine, text, number, memBlockInput, memBlockOutput]

/**
* Check if a specific file exists. Output: Returns 1 if file exists. Returns zero if does
* not exists
* @param filename: (string) - File name including the extension (such as brush1.ztl )
* return (number)
* 
* Example:
* 
* [FileExists, LargeImage.psd]
* 
* Returns 1 if “LargeImage.psd” exists or zero if file does not exist
*/
[FileExists, filename]

/**
* Retrieve information about a specified file. Output: returns the requested information or
* zero if the file not found.<br>
* Property Indexes:<br>
* 1 = file size (in mb)<br>
* 2 -7 = Creation date: year, month(1-12), day, hour, minutes, seconds<br>
* 8 -13 = Modified date: year, month(1-12), day, hour, minutes, seconds<br>
* 14 -19 = Access date: year, month(1-12), day, hour, minutes, seconds
* @param filename: (string) - File name including extension (such as brush1.ztl)
* @param infoIndex: (number) - The information requested index.
* return (number)
* 
* Example:
* 
* [FileGetInfo, LargeImage.psd, 1]
* 
* Returns the file size of the file named LargeImage.psd
*/
[FileGetInfo, filename, infoIndex]

/**
* Increments the index value contained within a filename string Output: Updated file Name.
* @param baseFilename: (string) - Base file name
* @param nbDigits: (number) - Number of digits (0-4) (i.e. 3: 001 )
* @param addCopy: (number) - Add 'Copy' string?(0:no, NonZero:yes)
* return (string)
* 
* Example:
* 
* [FileNameAdvance, "image01.psd"]
* 
* Adds 1 to the index of the string, i.e. if filename was image0l.psd it will be modified to
* image02.psd
*/
[FileNameAdvance, baseFilename, nbDigits, addCopy]

/**
* Asks user for a file name Output: Result file name or an empty string if user canceled
* operation (Sub-Level only).
* @param ext: (string) - Extension list (up to 3 extensions)
* @param defaultFilename: (string) - Default fileName for SaveDialog. Name should be omitted
* for OpenDialog
* @param title: (string) - Optional dialog title
* return (string)
* 
* Example:
* 
* [FileNameAsk, "DXF(*.dxf)|*.dxf|OBJ(*.obj)|*.obj||", , "Please select a file to load..."]
* 
* Activates OpenDialog for a *.dxf or *.obj file to load. Sets the dialog title to “Please
* select a file to load…”
* 
* [FileNameAsk, *.zvr, tempFile]
* 
* Activates SaveDialog with default “tempFile.zvr” file name.
*/
[FileNameAsk, ext, defaultFilename, title]

/**
* Extracts filename components. Output: The extracted filename component/s.
* @param filename: (string) - File name (Full path)
* @param component: (number) - Component specifier (1:path, 2:name, 4:ext)
* return (string)
* 
* Example:
* 
* [FileNameExtract, fullFilePath, 2]
* 
* returns the name component of the input file path
* 
* [FileNameExtract, fullFilePath, 2+4]
* 
* returns the name+extension components of the input file path
*/
[FileNameExtract, filename, component]

/**
* Retrieves the latest file name that was typed by the user in a Save/Load action Output:
* Latest file name that was typed by the user. Returned string will be empty if the user has
* canceled the action.
* return (string)
* 
* Example:
* 
* [FileNameGetLastTyped]
* 
* Returns a string with the latest typed filename
*/
[FileNameGetLastTyped]

/**
* Retrieves the latest file name that was used (by the user or by ZBrush) in a Save/Load
* action Output: Latest file name that was used. Returned string will be empty if the user
* has canceled the action.
* return (string)
* 
* Example:
* 
* [FileNameGetLastUsed]
* 
* Returns a string with the latest used filename
*/
[FileNameGetLastUsed]

/**
* Combines a base filename with an index number Output: Combined file name Variable
* @param baseFilename: (string) - Base file name
* @param index: (number) - Index
* @param nbOfDigit: (number) - Number of numeric digits to use
* return (string)
* 
* Example:
* 
* [FileNameMake, Image.psd, 12]
* 
* Creates a string with “Image12.psd” as its value
*/
[FileNameMake, baseFilename, index, nbOfDigit]

/**
* Resolves local path to full path Output: Full path.
* @param localFilename: (string) - Local File Name
* return (string)
* 
* Example:
* 
* [FileNameResolvePath, LargeImage.psd]
* 
* returns the full path of the “LargeImage.psd” file which is located within the same
* directory as the executing ZScript
* 
* [FileNameResolvePath, ]
* 
* returns the full path to the executing ZScript
*/
[FileNameResolvePath, localFilename]

/**
* Pre-sets the file name that will be used in the next Save/Load action
* @param filename: (string) - File name including the extension (such as .psd ). If omitted
* the stored file name will be cleared.
* 
* Example:
* 
* [FileNameSetNext, LargeImage.psd]
* 
* sets “LargeImage.psd” as the next file name that will be used in a Save/Load action
* 
* [FileNameSetNext, [FileNameMake, Image.psd, 23, 4]]
* 
* sets “Image0023.psd” as the next file name that will be used in a Save/Load action
*/
[FileNameSetNext, filename]

/**
* Executes a Shell command
* @param shellCommand: (string) - the Shell command
* 
* Example:
* 
* [ShellExecute, "open image.psd"]
* 
* opens file named “image.psd” in the default PSD editor.
* 
*/
[ShellExecute, shellCommand]

/**
* Performs time-based interpolation Output: Interpolated value or list
* @param time: (numbers) - Time (0:AtStart 0.5:half 1:AtEnd)
* @param value1: (numbers) - Value1 (Num, VarName or ListName)
* @param value2: (numbers) - Value2 (Num, VarName or ListName)
* @param value3: (numbers) - Value3 (Num, VarName or ListName)
* @param value4: (numbers) - Value4 (Num, VarName or ListName)
* @param doAngleInterp: (number) - Angle interpolation (0:no(default), 1:yes )
* return (numbers)
* 
* Example:
* 
* [Interpolate, 0.25, startx, endx]
* 
* returns an interpolated value (startX*(1.0-0.25))+(endX*0.25)
* 
* [Interpolate, 0.25, list1, list2, list3]
* 
* returns an interpolated list calculated as a spline at t=.25
*/
[Interpolate, time, value1, value2, value3, value4, doAngleInterp]

/**
* Combines 3 color-components into one RGB value Output: Combined RGB
* @param red: (number) - Red
* @param green: (number) - Green
* @param blue: (number) - Blue
* return (number)
* 
* Example:
* 
* [RGB, 20, 40, 80]
* 
* calculates and returns (20*65536 + 40*256 + 80) as a combined RGB value to be used in
* functions that need combined RGB input.
*/
[RGB, red, green, blue]

/**
* Evaluates the input and returns a numerical value Output: Value of the named variable
* @param expression: (numberVar) - expression to evaluate
* return (number)
* 
* Example:
* 
* [Val, (xPos*2)+4]
* 
* returns the value of variable “xPos” multiplied by 2, then added to 4.
*/
[Val, expression]

/**
* Gets the value of a named variable Output: Value of the named variable
* @param name: (anyVar) - Variable name
* return (any)
* 
* Example:
* 
* [Var, myString]
* 
* returns the value of variable “myString”.<br>
* Useful for clearly specifying when a variable name is being used. The special character #
* can also be used as in #myString.
*/
[Var, name]

/**
* Adds a value to an existing variable
* @param name: (numberVar) - Variable name
* @param value: (number) - Value To Add
* 
* Example:
* 
* [VarAdd, xPos, 42]
* 
* Adds 42 to the “xPos” variable.
* 
* [VarAdd, xPos, (Document:Width*.5)]
* 
* Adds the value of Document:Width multiplied by 0.5 to the “xPos” variable.
*/
[VarAdd, name, value]

/**
* Subtracts 1 from the value of an existing variable
* @param name: (numberVar) - Variable name
* 
* Example:
* 
* [VarDec, loopCounter]
* 
* subtracts 1 from the value of the “loopCounter” variable.
*/
[VarDec, name]

/**
* Divides an existing variable by a value
* @param name: (string) - Variable name
* @param value: (numberVar) - Value to Divide By
* 
* Example:
* 
* [VarDiv, xPos, 42]
* 
* Divides xPos variable by 42.
* 
* [VarDiv, xPos, (Document:Width*.5)]
* 
* Divides xPos variable by the value of Document:Width multiplied by 0.5.
*/
[VarDiv, name, value]

/**
* Adds 1 to the value of an existing variable
* @param name: (numberVar) - Variable name
* 
* Example:
* 
* [VarInc, loopCounter]
* 
* adds 1 to the “loopCounter” variable.
*/
[VarInc, name]

/**
* Multiplies an existing variable by a value
* @param name: (string) - Variable name
* @param value: (numberVar) - Value To Multiply
* 
* Example:
* 
* [VarMul, myVar, 5]
* 
* Multiplies the “myVar” variable by 5.
*/
[VarMul, name, value]

/**
* Returns the number of items in a variable or in a list Output: The number of items in a
* list or 1 if it is a simple variable
* @param name: (anyVar) - Variable name
* return (number)
* 
* Example:
* 
* [VarSize, list1]
* 
* returns the number of items in list1 variable.
*/
[VarSize, name]

/**
* Subtracts a value from an existing variable
* @param name: (string) - Variable name
* @param value: (number) - Value To Subtract
* 
* Example:
* 
* [VarSub, xPos, 42]
* 
* Subtracts 42 from the xPos variable.
* 
* [VarSub, xPos, (Document:Width*.5)]
* 
* Subtracts value of Document:Width multiplied by 0.5 from the “xPos” variable.
*/
[VarSub, name, value]

/**
* (ZScript debugging helper) aborts execution if specified condition is not true
* @param eval: (any) - True Or False Evaluation
* @param message: (string) - Message that will be shown if the first input is false (zero)
* 
* Example:
* 
* [Assert, [Var, a]<10, "Something is wrong"]
* 
* Checks the value of variable “a” and if it is smaller than 10 then displays a message
* “Something is wrong” and aborts the execution of the ZScript
*/
[Assert, eval, message]

/**
* Delays execution of ZScript for specified amount of time (Sub-Level only).
* @param seconds: (number) - Delay (in seconds)
* 
* Example:
* 
* [Delay, 1]
* 
* Delays 1 second
* 
* [Delay, 0.010]
* 
* Delays 10 milliseconds
*/
[Delay, seconds]

/**
* Aborts execution and exits the current ZScript
* 
* Example:
* 
* [Exit]
* 
* Current executing ZScript will be aborted and exited
*/
[Exit]

/**
* Provides conditional execution of a commands group (can be placed anywhere).
* @param eval: (any) - True Or False Evaluation
* @param commandsIfTrue: (commandGroup) - Commands group to be executed if true (not zero)
* @param commandsIfFalse: (commandGroup) - Commands group to be executed if false (is zero)
* 
* Example:
* 
* [If, MyVariable < 10, [MessageOK, LessThanl0], [MessageOK, l0orMore]]
* 
* Checks the variable “MyVariable” and displays a message “LessThanl0” if the value is less
* than 10 and displays “l0orMore” otherwise
*/
[If, eval, commandsIfTrue, commandsIfFalse]

/**
* Disables interface updates.
* @param commands: (commandGroup) - Commands group to be executed without updating the
* interface
* 
* Example:
* 
* [IFreeze, ...]
* 
* Execute inner commands without updating the interface to increase execution speed
*/
[IFreeze, commands]

/**
* Repeats execution of the specified commands group
* @param count: (number) - RepeatCount
* @param CommandsGroup: (commandGroup) - Commands group
* @param countVar: (varName) - Optional loop-counter variable (starts at Zero)
* 
* Example:
* 
* [Loop, 5, [MessageOK, Hi]]
* 
* Displays a message box 5 times
* 
* [Loop, n, [VarSet, a, a+1]]
* 
* repeats the process of adding 1 to variable a, n times
*/
[Loop, count, CommandsGroup, countVar]

/**
* Continues execution from the beginning of the current Loop
* 
* Example:
* 
* [LoopContinue]
* 
* loops to the first command within the current Loop
*/
[LoopContinue]

/**
* Exits the current Loop
* 
* Example:
* 
* [LoopExit]
* 
* Exits the current Loop. Useful when searching for a particular value which has been found.
*/
[LoopExit]

/**
* Executes the specified defined routine (can be placed anywhere).
* @param name: (routine) - Name of the routine to be called
* @param inputVar01: (any) - Input Var01
* @param inputVar02: (any) - Input Var02
* @param inputVar03: (any) - Input Var03
* @param inputVar04: (any) - Input Var04
* @param inputVar05: (any) - Input Var05
* @param inputVar06: (any) - Input Var06
* @param inputVar07: (any) - Input Var07
* @param inputVar08: (any) - Input Var08
* @param inputVar09: (any) - Input Var09
* @param inputVar10: (any) - Input Var10
* 
* Example:
* 
* [RoutineCall, testing]
* 
* Executes a routine named “testing”
*/
[RoutineCall, name, inputVar01, inputVar02, inputVar03, inputVar04, inputVar05, inputVar06,
inputVar07, inputVar08, inputVar09, inputVar10]

/**
* Defines a named commands group (can be placed anywhere but generally Top Level).
* @param name: (varName) - Name of the routine
* @param commands: (commandGroup) - Commands group that will be executed when the routine is
* called
* @param inputVar01: (varName) - Input Var01
* @param inputVar02: (varName) - Input Var02
* @param inputVar03: (varName) - Input Var03
* @param inputVar04: (varName) - Input Var04
* @param inputVar05: (varName) - Input Var05
* @param inputVar06: (varName) - Input Var06
* @param inputVar07: (varName) - Input Var07
* @param inputVar08: (varName) - Input Var08
* @param inputVar09: (varName) - Input Var09
* @param inputVar10: (varName) - Input Var10
* 
* Example:
* 
* [RoutineDef, testing, [MessageOK, Hi][MessageOK, There]]
* 
* Creates a routine named “testing” that when called will display 2 messages to the user
* (“Hi” and then “There”).
*/
[RoutineDef, name, commands, inputVar01, inputVar02, inputVar03, inputVar04, inputVar05,
inputVar06, inputVar07, inputVar08, inputVar09, inputVar10]

/**
* Exists ZScript and be awaken by specified event (can be placed anywhere).
* @param time: (number) - Sleep amount in seconds
* @param commands: (commandGroup) - Commands group to execute when awaken
* @param event: (number) - Optional event (default:1) (1:Timer 2:Mouse Moved 4:LButton down
* 8:LButton up 16:KeyDown 32:keyUp 64:ModifierKeyDown 128:ModifierKeyUp 256:Startup 512:Shut
* down 1024:InterfaceItem pressed/unpressed 2048:tool selected 4096:texture selected
* 8192:alpha selected)
* @param eventCodeVar: (string) - Optional output variable which will contain the event code
* that has awaken the ZScript
* @param windowIdVar: (string) - Optional output variable which will contain the ID of the
* window pointed by the mouse
* 
* Example:
* 
* [Sleep, 100, [Note, "LButton pressed"], 4]
* 
* Sleeps until awakened when left mouse button clicked.
*/
[Sleep, time, commands, event, eventCodeVar, windowIdVar]

/**
* Exists ZScript and continues the Sleep command (Sub-Level only).
* @param newTime: (number) - Optional new Sleep amount in seconds (default:unchanged)
* @param event: (number) - Optional event (default:unchanged) (1:Timer 2:Mouse Moved
* 4:LButton down 8:LButton up 16:KeyDown 32:keyUp 64:ModifierKeyDown 256:Startup 512:Shut
* down 1024:InterfaceItem post pressed/unpressed 2048:tool selected 4096:texture selected
* 8192 alpha selected)
* 
* Example:
* 
* [SleepAgain]
* 
* Sleeps again.
*/
[SleepAgain, newTime, event]

/**
* Inserts all the text and commands of an entire ZScript file. Not strictly a zscript
* command, it is the only one that does not have square brackets.
* @param filename: (string) - File Name
* 
* Example:
* 
* <zscriptinsert, "MyZscript.txt">
* 
* Inserts the entire contents of MyZScript.txt at that point of the zscript. When the
* zscript is compiled the inserted zscript is included and no further reference is made to
* the separate file. Useful in some circumstances but can make code difficult to understand.
* Also note that commenting out can have unpredictable results.
*/
<zscriptinsert, filename>

/**
* Copies data from one memory block into another. Output: Returns the number of bytes moved.
* (-1 indicates an error)
* @param sourceMemBlock: (memoryBlock) - From Mem block identifier
* @param fromOffset: (number) - From offset
* @param targetMemBlock: (memoryBlock) - To Mem block identifier
* @param toOffset: (number) - To offset
* @param byteCount: (number) - Number of bytes to move (if omitted, max possible number of
* bytes will be copied)
* return (number)
* 
* Example:
* 
* [MemCopy, FromMemBlock, 1000, ToMemBlock, 2000, 10000]
* 
* Moves 10, 000 bytes from FromMemBlock offset 1000 to ToMemBlock offset 2000. Returns the
* mumber of bytes moved.
*/
[MemCopy, sourceMemBlock, fromOffset, targetMemBlock, toOffset, byteCount]

/**
* Creates a new memory block. Output: Returns the size of the new memory block or error
* code…0=Error -1=Memory already exists -2=Can’t create memory block.
* @param name: (string) - Mem block identifier
* @param size: (number) - Mem block requested size
* @param fillValue: (number) - Initial fill? (omitted: noFill - faster to create)
* return (number)
* 
* Example:
* 
* [MemCreate, myTempData, 1000, 0]
* 
* Creates a new data block named myTempData of 1000 bytes in size, clears it to 0 and
* returns the Mem size. Returns 0 if data block could not be created.
*/
[MemCreate, name, size, fillValue]

/**
* Creates a new memory block from a disk file. Output: Returns the size of the new memory
* block or error code…0=Error -1=Memory already exists -2=Can’t create memory block -3=File
* not found.
* @param name: (string) - Mem block identifier
* @param filename: (string) - File name including the extension (such as brush1.ztl )
* @param offset: (number) - Optional start file offset for partial file read (default:0)
* @param byteCount: (number) - Optional max bytes to read (default:all file)
* return (number)
* 
* Example:
* 
* [MemCreateFromFile, myTempData, mesh.obj]
* 
* Loads the content of “mesh.obj” file into a new data block named “myTempData” and returns
* the memory block size. Returns zero if error encountered.
*/
[MemCreateFromFile, name, filename, offset, byteCount]

/**
* Deletes a memory block. Output: Returns the size of the deleted memory block. Returns 0 if
* memory block could not be found.
* @param memBlock: (memoryBlock) - Data block identifier
* return (number)
* 
* Example:
* 
* [MemDelete, myTempData]
* 
* Deletes “myTempData” memory block. Be sure to delete memory blocks when you have finished
* with them, so as to free memory.
*/
[MemDelete, memBlock]

/**
* Returns the size of a memory block (Also useful for determining if a memory block already
* exists. Output: Returns the size of the memory block. Returns 0 if data block could not be
* found.
* @param memBlock: (memoryBlock) - Memory block identifier
* return (number)
* 
* Example:
* 
* [MemGetSize, myTempData]
* 
* Returns the size of the “myTempData” memory block.
*/
[MemGetSize, memBlock]

/**
* Move data within an existing memory block. Output: Returns the mumber of bytes moved.
* @param memBlock: (memoryBlock) - Mem block identifier
* @param fromOffset: (number) - From offset
* @param toOffset: (number) - To offset
* @param byteCount: (number) - Number of bytes to move
* return (number)
* 
* Example:
* 
* [MemMove, myTempData, 1000, 2000, 10000]
* 
* Moves 10, 000 bytes from offset 1000 to start at offset 2000. Returns the number of bytes
* moved.
*/
[MemMove, memBlock, fromOffset, toOffset, byteCount]

/**
* Write data to a memory block. Output: Returns the number of actual bytes written
* @param memBlock: (memoryBlock) - Mem block identifier
* @param value: (number) - Value to write
* @param dataFormat: (number) - Data format (0:omitted:float 1:signed char 2:unsigned char
* 3:signed short 4:unsigned short 5:signed long 6:unsigned long 7:fixed16 (16.16))
* @param startOffset: (number) - Offset (in bytes) into memory block
* @param count: (number) - Repeat count
* @param iterOffset: (number) - Offset (in bytes) to subsequent writes
* return (number)
* 
* Example:
* 
* [MemMultiWrite, myTempData, 4, 12, 3, 5, 100]
* 
* Writes 5 times the value ‘4’ as “signed short” value into “MyTempData” starting at memory
* offsets “12”, “112”, “212”, “312” and “412”.
*/
[MemMultiWrite, memBlock, value, dataFormat, startOffset, count, iterOffset]

/**
* Reads data from a memory block. Output: Returns the number of actual bytes read
* @param memBlock: (memoryBlock) - Mem block identifier
* @param outputVar: (string) - Read variable
* @param dataFormat: (number) - Data format (0:omitted:float 1:signed char 2:unsigned char
* 3:signed short 4:unsigned short 5:signed long 6:unsigned long 7:fixed16 (16.16))
* @param offset: (number) - Offset (in bytes) into memory block
* return (number)
* 
* Example:
* 
* [MemRead, myTempData, width, 12, 3]
* 
* Reads the value from “MyTempData” at memory offset “12” as “signed short” and stores in
* variable “width”.
*/
[MemRead, memBlock, outputVar, dataFormat, offset]

/**
* Reads a string from a memory block. Output: Returns the number of bytes scanned. (may be
* larger than the actual bytes read)
* @param memBlock: (memoryBlock) - Mem block identifier
* @param stringVar: (string) - The string variable
* @param offset: (number) - Offset (in bytes) into memory block
* @param doBreakAtLineEnd: (number) - Break at line end? (default:no)
* @param doSkipWhiteSpace: (number) - Skip white space? (default:no)
* @param maxLength: (number) - Max read length 1 - 255(default)
* return (number)
* 
* Example:
* 
* [MemReadString, myTempData, tempText, 12, 1]
* 
* Reads a string from “myTempData” memory block to variable “tempText”, starting at memory
* offset l2 and break at the end of the line.
*/
[MemReadString, memBlock, stringVar, offset, doBreakAtLineEnd, doSkipWhiteSpace,
maxLength]

/**
* Resizes an exsiting memory block. Output: Returns the new size of the memory block. Zero
* indicates an error.
* @param memBlock: (memoryBlock) - Mem block identifier
* @param size: (number) - New size
* @param fillValue: (number) - Optional byte value to fill the newly added memory?
* (omitted:no)
* return (number)
* 
* Example:
* 
* [MemResize, myTempData, 1000]
* 
* Resizes the memory block “myTempData” to 1000 bytes in size. Returns 0 if data block could
* not be resized.
*/
[MemResize, memBlock, size, fillValue]

/**
* Saves an exisiting memory block to a disk file. Output: Returns the size of the new memory
* block or error code…0=Error -1=Memory does not exist -2=File already exists -3=File write
* error.
* @param memBlock: (memoryBlock) - Mem block identifier
* @param filename: (string) - File name including the extension (such as brush1.ztl )
* @param doOverwrite: (number) - Overwrite if exists? Set to a value (including 0) to save
* the file even if an identically named file already exists on disk - Default (no argument):
* do not overwrite
* return (number)
* 
* Example:
* 
* [MemSaveToFile, myTempData, "mesh.obj"]
* 
* Saves the content of “myTempData” memory block into a disk file named “mesh.obj” and
* returns the number of written bytes. Doesn’t overwrite as existing file of the same name.
* Returns zero if error encountered.
* 
* [MemSaveToFile, myTempData, "mesh.obj",1]
* 
* Saves the content of “myTempData” memory block into a disk file named “mesh.obj” and
* returns the number of written bytes. Overwrites an existing file of the same name. Returns
* zero if error encountered.
*/
[MemSaveToFile, memBlock, filename, doOverwrite]

/**
* Write data to a memory block. Output: Returns the number of actual bytes written
* @param memBlock: (memoryBlock) - Mem block identifier
* @param value: (number) - Value to write
* @param dataFormat: (number) - Data format (0:omitted:float 1:signed char 2:unsigned char
* 3:signed short 4:unsigned short 5:signed long 6:unsigned long 7:fixed16 (16.16))
* @param offset: (number) - Offset (in bytes) into memory block
* return (number)
* 
* Example:
* 
* [MemWrite, myTempData, 4, 12, 3]
* 
* Writes the value “4” as “signed short” value into “MyTempData” starting at memory offsets
* “12”.
*/
[MemWrite, memBlock, value, dataFormat, offset]

/**
* Writes a string into a memory block. Output: Returns the number of bytes written.
* (including the terminating zero)
* @param memBlock: (memoryBlock) - Mem block identifier
* @param string: (string) - The string
* @param offset: (number) - Offset (in bytes) into memory block
* @param doWriteEndChar: (number) - Write terminating zero char (if omitted:yes)
* return (number)
* 
* Example:
* 
* [MemWriteString, myTempData, "Hello There", 12]
* 
* Writes “Hello There” string starting at memory offset l2 and break at the end of the line.
*/
[MemWriteString, memBlock, string, offset, doWriteEndChar]

/**
* Gets current transformation values into an existing memory block (Sub-Level only).
* @param memBlock: (memoryBlock) - Mem block identifier
* @param index: (number) - Optional variable index (default:0)
* 
* Example:
* 
* [MTransformGet, MyDataBlock, 1]
* 
* store the current 9 transformation values into “MyDataBlock” memory block starting at
* variable index 1.
*/
[MTransformGet, memBlock, index]

/**
* Sets new transformation values from an existing memory block (Sub-Level only).
* @param memBlock: (memoryBlock) - Mem block identifier
* @param index: (number) - Optional variable index (default:0)
* 
* Example:
* 
* [MTransformSet, MyDataBlock, 1]
* 
* Sets all 9 transformation values from “MyDataBlock” memory block starting at variable
* index 1
*/
[MTransformSet, memBlock, index]

/**
* Defines a new variables memory block. Output: Returns the variables count of the new
* memory block or error code…0=Error -1=Memory already exists -2=Can’t create memory block.
* @param name: (string) - Mem block identifier
* @param size: (number) - Mem block variables count
* @param fillValue: (number) - Initial fill? (omitted:noFill - faster to create)
* return (number)
* 
* Example:
* 
* [MVarDef, myTempData, 1000, 0]
* 
* Creates a new data block named myTempData of 1000 variables in size, clear it to 0 and
* return the variables count. Returns 0 if data block could not be created.
*/
[MVarDef, name, size, fillValue]

/**
* Reads a float value from a memory block. Output: Returns the float value.
* @param memBlock: (varMemoryBlock) - Mem block identifier
* @param index: (number) - Variable index (0 based)
* return (number)
* 
* Example:
* 
* [MVarGet, myTempData, 1]
* 
* Returns the 2nd float value from the “MyTempData” memory block.
*/
[MVarGet, memBlock, index]

/**
* Writes a float value to a memory block. Output: Returns the old value of the variable.
* @param memBlock: (varMemoryBlock) - Mem block identifier
* @param index: (number) - Variable index (0 based)
* @param value: (number) - The value to write
* return (number)
* 
* Example:
* 
* [MVarSet, myTempData, 1, 4]
* 
* Sets the 2nd float value of the “MyTempData” memory block to 4.
*/
[MVarSet, memBlock, index, value]

/**
* Plays the sounds loaded into a specified memory block. Output: Returns the zero if command
* executed successfully (Sub-Level only).
* @param memBlock: (memoryBlock) - Mem block identifier
* @param playMode: (number) - Optional play mode (0:Play once, don't wait for completion
* (default); 1:Play once, wait for completion; 2:Play loop, don't wait for completion)
* return (number)
* 
* Example:
* 
* [SoundPlay, SayHello]
* 
* Plays the “SayHello” memory block.
*/
[SoundPlay, memBlock, playMode]

/**
* Stops the currently specified sound. Output: Returns the zero if command executed
* successfully (Sub-Level only).
* @param memBlock: (memoryBlock) - Mem block identifier
* return (number)
* 
* Example:
* 
* [Soundstop, SayHello]
* 
* Stops playback of the “SayHello” memory block.
*/
[SoundStop, memBlock]

/**
* Returns the full path of the active tool (<strong>Sub-Level</strong> only). Output: The
* path of the active tool.
* return (string)
* 
* <a id="GetActiveToolPath15" name="SubToolSelect"></a>
*/
[GetActiveToolPath]

/**
* Returns the index of the active tool (<strong>Sub-Level</strong> only). Output: Returns
* the index of the active tool (zero based).
* return (number)
* 
* <a id="GetActiveToolPath9" name="ToolGetCount"></a>
*/
[ToolGetActiveIndex]

/**
* Gets current Transpose Action Line values (<strong>Sub-Level</strong> only).
* @param sXpos: (number) - Start xPos
* @param sYpos: (number) - Start yPos
* @param sZpos: (number) - Start zPos
* @param eXpos: (number) - End xPos
* @param eYpos: (number) - End yPos
* @param eZpos: (number) - End zPos
* @param lineLength: (number) - Action Line Length
* @param xRedAxis: (number) - x of red axis
* @param yRedAxis: (number) - y of red axis
* @param zRedAxis: (number) - z of red axis
* @param xGreenAxis: (number) - x of green axis
* @param yGreenAxis: (number) - y of green axis
* @param zGreenAxis: (number) - z of green axis
* @param xBlueAxis: (number) - x of blue axis
* @param yBlueAxis: (number) - y of blue axis
* @param zBlueAxis: (number) - z of blue axis
* 
* Example:
* 
* [TransposeGet, xPos, yPos, zPos]
* 
* Sets the variables xPos, yPos and zPos to the 3D position values of the start of the
* transpose action line.
*/
[TransposeGet, sXpos, sYpos, sZpos, eXpos, eYpos, eZpos, lineLength, xRedAxis, yRedAxis,
zRedAxis, xGreenAxis, yGreenAxis, zGreenAxis, xBlueAxis, yBlueAxis, zBlueAxis]

/**
* Returns status of transpose line. Output: Returns 1 if shown, zero if not
* (<strong>Sub-Level</strong> only).
* return (number)
*/
[TransposeIsShown]

/**
* Sets current Transpose Action Line values (<strong>Sub-Level</strong> only)
* @param sXpos: (number) - Start xPos
* @param sYpos: (number) - Start yPos
* @param sZpos: (number) - Start zPos
* @param eXpos: (number) - End xPos
* @param eYpos: (number) - End yPos
* @param eZpos: (number) - End zPos
* @param lineLength: (number) - Action Line Length
* @param xRedAxis: (number) - x of red axis
* @param yRedAxis: (number) - y of red axis
* @param zRedAxis: (number) - z of red axis
* @param xGreenAxis: (number) - x of green axis
* @param yGreenAxis: (number) - y of green axis
* @param zGreenAxis: (number) - z of green axis
* @param xBlueAxis: (number) - x of blue axis
* @param yBlueAxis: (number) - y of blue axis
* @param zBlueAxis: (number) - z of blue axis
* 
* Example:
* 
* [TransposeSet, xPos, yPos, zPos]
* 
* Sets the start of the transpose action line 3D position to xPos, yPos, zPos.
*/
[TransposeSet, sXpos, sYpos, sZpos, eXpos, eYpos, eZpos, lineLength, xRedAxis, yRedAxis,
zRedAxis, xGreenAxis, yGreenAxis, zGreenAxis, xBlueAxis, yBlueAxis, zBlueAxis]

/**
* Add a new point to the specified curve (<strong>Sub-Level</strong> only). Output: Returns
* the point index (zero based) or -1 if failed.
* @param index: (number) - Curve Index (zero based)
* @param xPos: (number) - x position
* @param yPos: (number) - y position
* @param zPos: (number) - z position
* return (number)
* 
* Example:
* 
* [CurveAddPoint, 1,1,2,3]
* 
* Appends a new point (x=1,y=2,z=3) to the second curve in the list.
*/
[CurveAddPoint, index, xPos, yPos, zPos]

/**
* Creates a mesh from the current curves (<strong>Sub-Level</strong> only). Output: Returns
* the number of points in the new mesh. zero=error, -1=file exists.
* @param name: (string) - Name
* @param action: (number) -  Action (0(default): Append mesh to the active mesh, 1: Add as a
* new subtool, 2: Export OBJ file if file does not exist, 3: Export Obj file and overwrite
* if exists)
* @param thickness: (number) -  Thickness (zero: single side mesh)
* return (number)
* 
* Example:
* 
* [CurvesCreateMesh, myCurveMesh, 1, 10]
* 
* Creates a mesh of 10 units thickness from the current curves and appends it as a new
* subtool named ‘myCurveMesh’.
*/
[CurvesCreateMesh, name, action, thickness]

/**
* Deletes named curves list (Sub-Level only).
* @param name: (string) - Name
* 
* Example:
* 
* [CurvesDelete, myCurves]
* 
* Deletes curves list named ‘myCurves’.
*/
[CurvesDelete, name]

/**
* Creates a new curve in the current curves list (<strong>Sub-Level</strong> only). Output:
* Returns the curve index (zero based) or -1 if failed.
* return (number)
* 
* Example:
* 
* [CurvesNewCurve]
* 
* Creates a new curve in the current curves list.
*/
[CurvesNewCurve]

/**
* Creates a new curves list (<strong>Sub-Level </strong>only).
* @param name: (string) - Name
* 
* Example:
* 
* [CurvesNew, myCurves]
* 
* Creates a new curve list named ‘myCurves’.
*/
[CurvesNew, name]

/**
* Copy the ZScript curves to UI (<strong>Sub-Level</strong> only). Output: Returns zero if
* OK or -1 if failed.
* return (number)
* 
* Example:
* 
* [CurvesToUI]
* 
* Copies the current zscript curves to the UI so they are visible to the user.
*/
[CurvesToUI]

/**
* Creates DisplacementMap Output: Returns zero if executed successfully. Any other value
* indicates an error
* @param imgWidth: (number) - Image Width
* @param imgHeight: (number) - Image Height
* @param smooth: (number) - Smooth (default:yes)
* @param subPoly: (number) - SubPoly (default:0)
* @param border: (number) - Border (default:8)
* @param uvTileIndex: (number) - UVTile index (default:ignores UV tiles)
* return (number)
* 
* Example:
* 
* [DispMapCreate, 1024, 1024, 1, 7, 2]
* 
* Creates a DispMap, image size 1024×124, smooth=yes, border=7, UVTi1e index=2
*/
[DispMapCreate, imgWidth, imgHeight, smooth, subPoly, border, uvTileIndex]

/**
* Gets information about the currently active Mesh3D tool. Output: Returns zero if command
* executed successfully, any other value indicates and error (Sub-Level only).
* @param property: (number) - Property: (0:PointsCount 1:FacesCount 2:XYZ bounds 3:UVBounds
* 4:1stUVTile 5:NxtUVTile 6:PolysInUVTile 7:3DAreaOfUVTile 8:Full3DMeshArea)
* @param index: (number) - Optional input 1 Vertix/Face/Group/UVTile H index (0 based)
* @param optIn2: (number) - Optional input 2
* @param optOut1: (number) - Optional output variable1
* @param optOut2: (number) - Optional output variable2
* @param optOut3: (number) - Optional output variable3
* @param optOut4: (number) - Optional output variable4
* @param optOut5: (number) - Optional output variable5
* @param optOut6: (number) - Optional output variable6
* @param optOut7: (number) - Optional output variable7
* @param optOut8: (number) - Optional output variable8
* return (number)
* 
* Example:
* 
* [Mesh3DGet, 0]
* 
* returns the number of vertices.
*/
[Mesh3DGet, property, index, optIn2, optOut1, optOut2, optOut3, optOut4, optOut5, optOut6,
optOut7, optOut8]

/**
* Creates NormalMap Output: Returns zero if executed successfully. Any other value indicates
* an error
* @param imgWidth: (number) - Image Width
* @param imgHeight: (number) - Image Height
* @param isSmooth: (number) - Smooth (default:yes)
* @param subPoly: (number) - SubPoly (default:0)
* @param border: (number) - Border (default:8)
* @param uvTileIndex: (number) - UVTile index (default:ignores UV tiles)
* @param isLocal: (number) - Local(tangent) coordinates? (default:world coordinates)
* return (number)
* 
* Example:
* 
* [NormalMapCreate, 1024, 1024, 1, 7, 2]
* 
* Creates a Normal Map, image size 1024×124, smooth=yes, border=7, UVTi1e index=2.
*/
[NormalMapCreate, imgWidth, imgHeight, isSmooth, subPoly, border, uvTileIndex, isLocal]

/**
* Adds new ZSphere to the currently active ZSpheres tool Output: Returns the the index of
* the new ZSphere or -1 if command failed (Sub-Level only).
* @param xPos: (number) - xPos
* @param yPos: (number) - yPos
* @param zPos: (number) - zPos
* @param radius: (number) - Radius
* @param parentIndex: (number) - Parent index (0 based)
* @param color: (number) - Optional Color 0x000000<->0xffffff (RED*65536)+(GREEN*256)+BLUE
* @param mask: (number) - Optional Mask (0:unmasked to 255:fully masked)
* @param timeStamp: (number) - Optional TimeStamp
* @param flag: (number) - Optional Flags (0:default, 1:invisible link to parent)
* return (number)
* 
* Example:
* 
* [ZSphereAdd, 0, .5, 1, .1, 0]
* 
* Adds a ZSphere located at (0, 0.5, 1) with 0.1 radius and ZSphere #0 as the parent.
*/
[ZSphereAdd, xPos, yPos, zPos, radius, parentIndex, color, mask, timeStamp, flag]

/**
* Deletes a ZSphere from the currently active ZSpheres tool Output: Returns zero if command
* executed successfully (Sub-Level only).
* @param index: (number) - ZSphere index (Sphere 0 can't be deleted)
* return (number)
* 
* Example:
* 
* [ZSphereDel, 2]
* 
* Deletes the 3rd ZSphere.
*/
[ZSphereDel, index]

/**
* Prepares the currently active ZSpheres tool for ZScript editing session. Output: Returns
* the zero if command executed successfully.
* @param commands: (commandGroup) - ZSpheres editing commands
* @param doStoreUndo: (number) - Store undo? (0:Skip Undo, 1:Store undo)
* return (number)
* 
* Example:
* 
* [ZSphereEdit, ...commands...]
* 
* begins ZSphere edit session and executes …commands…
*/
[ZSphereEdit, commands, doStoreUndo]

/**
* Gets information about the currently active ZSpheres tool. (Must be placed within
* ZSphereEdit command) Output: Returns the value of the specified property (Sub-Level only).
* @param propertyIndex: (number) - Property: 0:ZSpheres count, 1:xPos, 2:yPos, 3:zPos,
* 4:radius, 5:color, 6:mask, 7:ParentIndex(-1:none), 8:LastClickedIndex(-1:none),
* 9:TimeStamp, 10:ChildsCount, 11:ChildIndex (2nd index), 12:TimeStampCount,
* 13:TimeStampIndex, 14:flags, 15:Twist Angle, 16:Membrane, 17:X Res, 18:Y Res, 19:Z Res
* @param zSphereIndex: (number) - Optional ZSphere index (0 based)
* @param index2: (number) - Optional 2nd index (0 based)
* return (number)
* 
* Example:
* 
* [ZSphereGet, 0]
* 
* returns the number of ZSpheres.
* 
* [ZSphereGet, 2, 1]
* 
* returns the Y position of the 2nd ZSphere.
*/
[ZSphereGet, propertyIndex, zSphereIndex, index2]

/**
* Modifies a property of the currently active ZSpheres tool. (Must be placed within
* ZSphereEdit command) Output: Returns zero if command executed successfully (Sub-Level
* only).
* @param propertyIndex: (number) - Property: 0:unused, 1:xPos, 2:yPos, 3:zPos, 4:radius,
* 5:color, 6:mask, 7:ParentIndex, 8:unused, 9:TimeStamp, 10:unused, 11:unused, 12:unused,
* 13:unused, 14:flags, 15:Twist Angle, 16:Membrane, 17:X Res, 18:Y Res, 19:Z Res, 20:XYZ Res,
* , 21:UserValue
* @param zSphereIndex: (number) - ZSphere index (0 based)
* @param value: (number) - New property value
* return (number)
* 
* Example:
* 
* [ZSphereSet, 4, 6, .5]
* 
* sets the radius of ZSphere index 6 to 0.5.
*/
[ZSphereSet, propertyIndex, zSphereIndex, value]

/**
* Integer Portion of value; removes everything after decimal point
* @param value: (number) - 
* return (number)
*/
INT(value)

/**
* Fractional Portion of value; removes everything before decimal point
* @param value: (number) - 
* return (number)
*/
FRAC(value)

/**
* Absolute Value (ignores + or – sign)
* @param value: (number) - 
* return (number)
*/
ABS(value)

/**
* Changes the + or – sign of value
* @param value: (number) - 
* return (number)
*/
NEG(value)

/**
* Finds the lesser of two values
* @param value1: (number) - 
* @param value2: (number) - 
* return (number)
*/
MIN(value1, value2)

/**
* Finds the greater of two values
* @param value1: (number) - 
* @param value2: (number) - 
* return (number)
*/
MAX(value1, value2)

/**
* Square Root of the value
* @param value: (number) - 
* return (number)
*/
SQRT(value)

/**
* Random Number between 0 and value
* @param value: (number) - 
* return (number)
*/
RAND(value)

/**
* Random Integer between 0 and value
* @param value: (number) - 
* return (number)
*/
IRAND(value)

/**
* Trig Sine of the angle, in degrees
* @param angle: (number) - 
* return (number)
*/
SIN(angle)

/**
* Trig cosine of the angle, in degrees
* @param angle: (number) - 
* return (number)
*/
COS(angle)

/**
* Trig Tangent of the angle, in degrees
* @param angle: (number) - 
* return (number)
*/
TAN(angle)

/**
* Trig ArcSine of the value
* @param value: (number) - 
* return (number)
*/
ASIN(value)

/**
* Trig ArcCosine of the value
* @param value: (number) - 
* return (number)
*/
ACOS(value)

/**
* Trig ArcTangent of the value
* @param value: (number) - 
* return (number)
*/
ATAN(value)

/**
* Trig ArcTangent of the value (*ZBrush 3 only)
* @param value: (number) - 
* @param value: (number) - 
* return (number)
*/
ATAN2(value, value)

/**
* Natural Log of the value
* @param value: (number) - 
* return (number)
*/
LOG(value)

/**
* Base 10 Log of the value
* @param value: (number) - 
* return (number)
*/
LOG10(value)

/**
* Boolean Evaluation
* @param value: (number) - 
* return (number)
*/
BOOL(value)

