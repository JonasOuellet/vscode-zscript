const http = require("http");
const fs = require("fs");
const jsdom = require("jsdom");
const { JSDOM } = jsdom;
const path = require("path");
const Snippet = require('./snippet');

const indexFile = path.normalize(path.join(__dirname, "..", "zscripts", "index.txt"));


var options = {
    host: "docs.pixologic.com",
    path: "/user-guide/customizing-zbrush/zscripting/command-reference/"
};


var request = http.request(options, (res) => {
    var data = '';
    res.on('data', (chunk) => {
        data += chunk;
    });
    res.on('end', () => {
        let commandIndex = genCommandIndex(data);

        writeCommandIndexFile(commandIndex);
    });
});

request.on('error', function (e) {
    console.log(e.message);
});

request.end();

function getAllBellowElementText(elem) {
    return "";
};

function genCommandIndex(data) {
    let root = new JSDOM(data);
    let articleNode = root.window.document.querySelector("#post-3750");
    let contentDiv = articleNode.querySelector("div");
    if (!contentDiv) {
        console.error("Cannot find content div");
    }
    let commandTable = contentDiv.querySelectorAll("table");
    if (!commandTable) {
        console.error("Cannot find command table");
        return [];
    }

    var commandIndex = "/********************************\nThis file is automatically generated.\nDO NOT MODIFY THIS FILE\n\nZScript Command Definitions\nhttp://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/command-reference/\n********************************/\n\n\n";
    for (let t = 1; t < commandTable.length - 1; t++) {
        let curTable = commandTable[t];
        let tableBody = curTable.querySelector('tbody');
        let tableContent = tableBody.querySelectorAll("tr");
        for (let x = 1; x < tableContent.length; x+=4) {
            try {
                let commandTab = tableContent[x];
                let descTab = tableContent[x + 1];
                let exempleTab = tableContent[x + 2] 
                
                let code = commandTab.querySelectorAll("td")[1].querySelector("code");
                let curSnippet = new Snippet(code);

                commandIndex += "/*****************************\n"
                commandIndex += getDescription(descTab.querySelector("td"));
                commandIndex += "\n";
                commandIndex += getDescription(exempleTab.querySelector("td"));
                commandIndex += "\n*****************************/\n"

                commandIndex += setLineMaxCharLength(curSnippet.getText(code));
                commandIndex += "\n\n\n"
            } catch (error) {
                //console.log(error);
            }
        }
    }

    return commandIndex;
}

function setLineMaxCharLength(line, maxChar=90, maxCommaLength=10) {
    if (line.length <= maxChar) {
        return line;
    }
    let finalLine = "";
    let newLine = line;
    let index = 0;
    while (maxChar < newLine.length) {
        let commaPos = newLine.lastIndexOf(',', maxChar);
        let spacePose = newLine.lastIndexOf(' ', maxChar);

        if (commaPos > spacePose) {
            finalLine += newLine.slice(0, commaPos+1);
            newLine = newLine.slice(commaPos, newLine.length);
        } else {
            finalLine += newLine.slice(0, spacePose);
            newLine = newLine.slice(spacePose+1, newLine.length);
        }

        if (newLine.length) {
            finalLine += '\n';
        }
    }
    finalLine += newLine;

    return finalLine;
}

function getDescription(domElement) {
    let domHTML = domElement.innerHTML;
    domHTML = domHTML.replace(/<p>/g, "");
    domHTML = domHTML.replace(/<\/p>/g, "");
    domHTML = domHTML.replace(/<dd>/g, "");
    domHTML = domHTML.replace(/<\/dd>/g, "");
    domHTML = domHTML.replace(/<dl>/g, "");
    domHTML = domHTML.replace(/<\/dl>/g, "");
    domHTML = domHTML.replace(/<br>/g, "\n");
    domHTML = domHTML.replace(/<code>/g, "");
    domHTML = domHTML.replace(/<\/code>/g, "");
    domHTML = domHTML.replace(/<b>/g, "");
    domHTML = domHTML.replace(/<\/b>/g, "");
    domHTML = domHTML.replace(/&lt;/g, "<");
    domHTML = domHTML.replace(/&gt;/g, ">");
    domHTML = domHTML.replace(/<i>/g, "");
    domHTML = domHTML.replace(/<\/i>/g, "");

    let outLine = "";
    let lines = domHTML.split("\n");
    lines.forEach((line, index) => {
        outLine += setLineMaxCharLength(line);
        if (index <= lines.length) {
            outLine += '\n';
        }
    });
    return outLine;
}

function writeCommandIndexFile(commandIndexData) {
    fs.writeFile(indexFile, commandIndexData);
}
